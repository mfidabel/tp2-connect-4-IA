{"version":3,"sources":["modelos/estrategia.ts","modelos/ficha.ts","modelos/resultado.ts","modelos/tablero.ts","algoritmos/RLAgent.ts","modelos/modo.ts","componentes/Parametros.tsx","algoritmos/MinMax.ts","algoritmos/AlfaBeta.ts","modelos/ResultadoEjecucion.ts","componentes/TableroGrafico.tsx","algoritmos/jugadorEstrategia.ts","modelos/configuracionParametros.ts","componentes/TablaResultados.tsx","App.js","reportWebVitals.js","index.js"],"names":["Estrategia","Ficha","Resultado","ficha2Resultado","ficha","Rojo","GanadorRojo","Amarillo","GanadorAmarillo","SinGanador","Tablero","posiciones","this","Array","fill","undefined","map","Vacio","anterior","conecta","i","length","j","actual","Math","max","min","Empate","line","concat","valueOf","console","log","columna","jugador","error","verificarColumnaLibre","idxFila","findIndex","fila","RLAgent","n","tablero","lastTablero","entrenar","jugadorAgente","alpha","turnosMaximos","gameResult","lookupTable","Map","qRate","expansiones","contrario","calcularResultado","getProbability","tableroSerializado","toString","has","set","get","nextStateProb","prob","calcularR","columnas","maxProb","Number","MIN_SAFE_INTEGER","push","floor","random","updateProbability","copiarTablero","imprimirTablero","prompt","require","parseInt","tableroOrigen","tableroDestino","currentGame","turno","jugadas","jugarElitista","jugarRandom","jugarHumano","Agente","Modo","Parametros","onElegirEstrategia","onLimpiarTablero","useState","Minimax","estrategia","setEstrategia","nivel","setNivel","setRate","trainN","setTrainN","Form","Row","Col","Group","className","Label","Select","value","onChange","event","currentTarget","Alfabeta","Control","type","disabled","parseFloat","Button","variant","onClick","reset","updateAlpha","jugarVsRandom","MinMax","count","libre","MAX_SAFE_INTEGER","pesos","reduce","r","a","minValue","calcularF","resultado","minProb","maxValue","AlfaBeta","alfa","beta","ResultadoEjecucion","algoritmo","tiempo","nodos_expandidos","Agujero","fichaValor","Columna","handleClick","agujeros","_","reverse","TableroGrafico","parametros","grabarResultado","FICHA_ESTRATEGIA","FICHA_HUMANO","setTablero","setTurno","SinSeleccionar","modo","setModo","ganador","setGanador","seleccionarModo","idxColumna","copiaTablero","JSON","parse","stringify","tirarFicha","hacerMovimiento","estiloGanador","useEffect","t0","performance","now","agente","nuevoTablero","jugarEstrategia","nodos","t1","res","Humano","configuracionParametros","TablaResultados","resultados","Table","striped","bordered","hover","idx","algoritmos","App","setParametros","setResultados","Container","prevState","newState","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9a3d21e8.chunk.js","sourcesContent":["export enum Estrategia {\n    Minimax = 0,\n    Alfabeta,\n    RLAgent\n}","export enum Ficha {\n    Vacio = 0,\n    Rojo = 1,\n    Amarillo = 2,\n}","import {Ficha} from \"./ficha\";\n\nexport enum Resultado {\n    SinGanador = 0,\n    GanadorRojo = 1,\n    GanadorAmarillo = 2,\n    Empate = 3,\n}\n\nexport const ficha2Resultado = (ficha: Ficha): Resultado => {\n    switch (ficha){\n        case Ficha.Rojo:\n            return Resultado.GanadorRojo;\n        case Ficha.Amarillo:\n            return Resultado.GanadorAmarillo;\n        default:\n            return Resultado.SinGanador;\n    }\n}","import {Ficha} from \"./ficha\";\nimport {Resultado} from \"./resultado\";\n\nexport default class Tablero {\n    posiciones: Ficha[][]\n\n    constructor() {\n        // Crear la matrix llena de espacios vacios\n        this.posiciones = Array(6).fill(undefined).map( () => Array(7).fill(Ficha.Vacio));\n    }\n\n    vaciarTablero(): void {\n        // Vacia el tablero\n        this.posiciones = Array(6).fill(undefined).map( () => Array(7).fill(Ficha.Vacio));\n    }\n\n    calcularResultado(): Resultado {\n        let conecta = 0;\n        let anterior;\n\n        // Recorre el tablero horizontalmente\n        for (let i = 0; i < this.posiciones.length; i++) {\n            anterior = 0;\n            for (let j = 0; j < (this.posiciones)[0].length; j++) {\n                let actual = (this.posiciones)[i][j];\n                if (actual === anterior) conecta++;\n                else conecta = 1;\n                if (conecta === 4 && (actual === Ficha.Rojo || actual === Ficha.Amarillo)) {\n                    // Retornamos el Ganador\n                    return actual === Ficha.Rojo ? Resultado.GanadorRojo : Resultado.GanadorAmarillo;\n                }\n                anterior = actual;\n            }\n        }\n\n        // Recorre el tablero verticalmente\n        for (let i = 0; i < this.posiciones[0].length; i++) {\n            anterior = 0;\n            for (let j = 0; j < this.posiciones.length; j++) {\n                let actual = this.posiciones[j][i];\n                if (actual === anterior) conecta++;\n                else conecta = 1;\n                if (conecta === 4 && (actual === Ficha.Rojo || actual === Ficha.Amarillo)) {\n                    // Retornamos el ganador\n                    return actual === Ficha.Rojo ? Resultado.GanadorRojo : Resultado.GanadorAmarillo;\n                }\n                anterior = actual;\n            }\n        }\n\n        // Recorre la diagonal secundaria\n        for (let i = 3; i < this.posiciones.length + this.posiciones[0].length - 4; i++) {\n            anterior = 0;\n            for (let j = Math.max(0, i - this.posiciones.length + 1); j < Math.min(i+1, this.posiciones[0].length); j++) {\n                let actual = this.posiciones[i-j][j];\n                if (actual === anterior) conecta++;\n                else conecta = 1;\n                if (conecta === 4 && (actual === Ficha.Rojo || actual === Ficha.Amarillo)) {\n                    return actual === Ficha.Rojo ? Resultado.GanadorRojo : Resultado.GanadorAmarillo;\n                }\n                anterior = actual;\n            }\n        }\n\n        // Recorre la diagonal primaria\n        for (let i = 3; i < this.posiciones.length + this.posiciones[0].length - 4; i++) {\n            anterior = 0;\n            for (let j = Math.max(0, i - this.posiciones.length + 1); j < Math.min(i+1, this.posiciones[0].length); j++) {\n                let actual = this.posiciones[this.posiciones.length-1-i+j][j];\n                if (actual === anterior) conecta++;\n                else conecta = 1;\n                if (conecta === 4 && (actual === Ficha.Rojo || actual === Ficha.Amarillo)) {\n                    return actual === Ficha.Rojo ? Resultado.GanadorRojo : Resultado.GanadorAmarillo;\n                }\n                anterior = actual;\n            }\n        }\n\n        // Quedan espacios vacios, no hay ganador\n        for (let i = 0; i < this.posiciones[0].length; i++) {\n            if (this.posiciones[0][i] === 0 || this.posiciones[this.posiciones.length-1][i] === 0)\n                return Resultado.SinGanador;\n        }\n\n        // Empate\n        return Resultado.Empate;\n    }\n\n    imprimirTablero() {\n        for (let i = this.posiciones.length-1; i >= 0; i--) {\n            let line = \"|\";\n            for (let j = 0; j < this.posiciones[0].length; j++) {\n                line = line.concat(`${this.posiciones[i][j].valueOf()}`).concat(\"|\");\n            }\n            console.log(line);\n        }\n    }\n\n    tirarFicha(columna: number, jugador: Ficha) {\n        if (columna > this.posiciones[0].length) {\n            console.error(\"No existe la columna\");\n            return;\n        }\n\n        if (!this.verificarColumnaLibre(columna)) {\n            console.error(\"No se puede colocar aca\")\n            return;\n        }\n\n        // Encontrar primera fila donde se pueda tirar la ficha\n        let idxFila = this.posiciones.findIndex( fila => fila[columna] === Ficha.Vacio )\n\n        this.posiciones[idxFila][columna] = jugador; // Asignar\n    }\n\n    verificarColumnaLibre(columna: number): Boolean {\n        if (columna > this.posiciones[0].length) {\n            console.error(\"No existe la columna\");\n            return false;\n        }\n\n        return this.posiciones[this.posiciones.length-1][columna] === Ficha.Vacio;\n    }\n}","import {Ficha} from \"../modelos/ficha\";\nimport Tablero from \"../modelos/tablero\";\nimport {ficha2Resultado, Resultado} from \"../modelos/resultado\";\n\nexport default class RLAgent {\n    // Agente\n    static Agente: RLAgent = new RLAgent(10000)\n\n    // Variables\n    n: number;\n    tablero: Tablero = new Tablero();\n    lastTablero: Tablero = new Tablero();\n    entrenar: boolean = false;\n    jugadorAgente: Ficha = Ficha.Rojo;\n    alpha: number = 0.7;\n    turnosMaximos: number = 42;\n    gameResult: Resultado = Resultado.SinGanador;\n    lookupTable: Map<string, number> = new Map<string, number>();\n    qRate: number = 0.5;\n    expansiones: number = 0;\n\n    constructor(n: number) {\n        this.n = n;\n    }\n\n    reset(entrenar: boolean) {\n        this.tablero = new Tablero();\n        this.lastTablero = new Tablero();\n        this.entrenar = entrenar;\n        this.gameResult = Resultado.SinGanador;\n        this.expansiones = 0;\n    }\n\n    resetLearning() {\n        this.lookupTable = new Map<string, number>();\n    }\n\n    calcularR(tablero: Tablero, jugador: Ficha) {\n        let contrario = jugador === Ficha.Rojo ? Ficha.Amarillo : Ficha.Rojo;\n\n        let result = tablero.calcularResultado();\n\n        switch (result) {\n            case ficha2Resultado(jugador):\n                // Gana el jugador\n                return 1.0;\n            case ficha2Resultado(contrario):\n                // Gana el contrario\n                return 0.0;\n            case Resultado.Empate:\n                // Sale empate\n                return 0.0;\n            default:\n                // No hay ganador\n                return this.getProbability(tablero);\n        }\n    }\n\n    getProbability(tablero: Tablero): number {\n        this.expansiones++;\n        let tableroSerializado = tablero.posiciones.toString();\n\n        if (!this.lookupTable.has(tableroSerializado)) {\n            this.lookupTable.set(tableroSerializado, 0.5);\n        }\n\n        return this.lookupTable.get(tableroSerializado)!;\n    }\n\n    updateProbability(tablero: Tablero, nextStateProb: number, jugador: Ficha) {\n        let prob = this.calcularR(tablero, jugador);\n        prob = prob + this.alpha * (nextStateProb - prob);\n\n        let tableroSerializado = tablero.toString();\n        this.lookupTable.set(tableroSerializado, prob);\n    }\n\n    jugarElitista(jugador: Ficha) {\n        let prob, columna, columnas: number[] = [];\n        let maxProb = Number.MIN_SAFE_INTEGER;\n\n        // elegir fila disponible con max reward\n        for (let j = 0; j < this.tablero.posiciones[0].length; j++) {\n            if (this.tablero.posiciones[this.tablero.posiciones.length-1][j] !== Ficha.Vacio) continue;\n            let i = this.tablero.posiciones.length-1;\n            while (i > 0 && this.tablero.posiciones[i-1][j] === Ficha.Vacio) i--;\n\n            this.tablero.posiciones[i][j] = jugador;\n            prob = this.calcularR(this.tablero, jugador);\n            if (prob > maxProb) {\n                maxProb = prob;\n                columnas = [j];\n            } else if (prob === maxProb) {\n                columnas.push(j);\n            }\n            this.tablero.posiciones[i][j] = 0;\n        }\n\n        // rompe empates entre columnas\n        if (columnas.length === 1) {\n            columna = columnas[0];\n        } else {\n            if (columnas.length === 0) {\n                for (let i = 0; i < this.tablero.posiciones[0].length; i++) {\n                    if (this.tablero.posiciones[this.tablero.posiciones.length-1][i] === 0) {\n                        columnas.push(i);\n                    }\n                }\n            }\n            columna = columnas[Math.floor(Math.random() * columnas.length)];\n        }\n\n        // entrenar\n        if (this.entrenar) {\n            this.updateProbability(this.lastTablero, maxProb, jugador);\n        }\n\n        // aplicar jugada\n        let fila = this.tablero.posiciones.length - 1;\n        while (fila > 0 && this.tablero.posiciones[fila-1][columna] === Ficha.Vacio) fila--;\n        this.tablero.posiciones[fila][columna] = jugador;\n\n        // actualizar ultimo tablero\n        this.copiarTablero(this.tablero, this.lastTablero);\n    }\n\n    jugarRandom(jugador: Ficha) { // Diversificación\n        // Elegir casillas disponibles al azar\n        let columnas = [];\n        for (let i = 0; i < this.tablero.posiciones[0].length; i++) {\n            if (this.tablero.posiciones[this.tablero.posiciones.length-1][i] === Ficha.Vacio) {\n                columnas.push(i);\n            }\n        }\n        let columna = columnas[Math.floor(Math.random() * columnas.length)];\n\n        // aplicar jugada\n        let fila = this.tablero.posiciones.length - 1;\n        while (fila > 0 && this.tablero.posiciones[fila-1][columna] === Ficha.Vacio) fila--;\n        this.tablero.posiciones[fila][columna] = jugador;\n\n        //si es el agente, actualizar ultimo tablero\n        if (jugador === this.jugadorAgente) {\n            this.copiarTablero(this.tablero, this.lastTablero);\n        }\n    }\n\n    jugarHumano(jugador: Ficha) {\n        // lee una casilla disponible\n        this.tablero.imprimirTablero()\n        let columnas = [];\n        for (let i = 0; i < this.tablero.posiciones[0].length; i++) {\n            if (this.tablero.posiciones[this.tablero.posiciones.length-1][i] === Ficha.Vacio) {\n                columnas.push(i);\n            }\n        }\n        let columna;\n        do {\n            const prompt = require('prompt-sync')();\n            console.log(columnas);\n            columna = parseInt(prompt('Cual es su jugada? '));\n            console.log(columna);\n        } while (!(columna in columnas));\n\n        // aplicar jugada\n        let fila = this.tablero.posiciones.length - 1;\n        while (fila > 0 && this.tablero.posiciones[fila-1][columna] === Ficha.Vacio) fila--;\n        this.tablero.posiciones[fila][columna] = jugador;\n\n        // si es el agente, actualizar ultimo tablero\n        if (jugador === this.jugadorAgente) {\n            this.copiarTablero(this.tablero, this.lastTablero);\n        }\n    }\n\n    copiarTablero(tableroOrigen: Tablero, tableroDestino: Tablero) {\n        for (let i = 0; i < tableroOrigen.posiciones.length; i++) {\n            for (let j = 0; j < tableroOrigen.posiciones[0].length; j++) {\n\n                tableroDestino.posiciones[i][j] = tableroOrigen.posiciones[i][j];\n            }\n        }\n    }\n\n    updateAlpha(currentGame: number) {\n\n        this.alpha = 0.5 - 0.49 * currentGame / this.n;\n    }\n\n    jugarVsRandom() {\n\n        let jugador = this.jugadorAgente;\n        let contrario = (jugador % 2) + 1;\n        let turno = 1;\n        let jugadas = this.turnosMaximos;\n        let q;\n        do {\n            if (turno === jugador) {\n                q = Math.random();\n                if (q <= this.qRate || !this.entrenar) { // en train, juega basado en qrate\n                    this.jugarElitista(jugador);         // en validation, juega siempre elitista\n                } else {\n                    this.jugarRandom(jugador);\n                }\n            } else {\n                this.jugarRandom(contrario);\n            }\n\n            // actualizar resultado\n            this.gameResult = this.tablero.calcularResultado();\n            if (this.gameResult > 0) { // ya hay resultado\n                if (this.gameResult !== ficha2Resultado(jugador) && this.entrenar) { // perdimos, actualizar tablero\n                    this.updateProbability(this.lastTablero, this.calcularR(this.tablero, jugador), jugador);\n                }\n                break;\n            }\n\n            turno = 2 - turno + 1;\n            jugadas--;\n        } while (jugadas > 0);\n\n    }\n\n    jugarVsHumano() {\n\n        let jugador = this.jugadorAgente;\n        let contrario = (jugador % 2) + 1;\n        let turno = 1;\n        let jugadas = this.turnosMaximos;\n        do {\n            if (turno === jugador) {\n                this.jugarRandom(jugador);\n            } else {\n                this.jugarHumano(contrario);\n            }\n\n            //actualizar resultado\n            this.gameResult = this.tablero.calcularResultado();\n            if (this.gameResult > 0) { //ya hay resultado\n                if (this.gameResult !== ficha2Resultado(jugador) && this.entrenar) //perdimos, actualizar tablero\n                {\n                    this.updateProbability(this.lastTablero, this.calcularR(this.tablero, jugador), jugador);\n                    console.log(\"Felicidades! Usted ha ganado.\");\n                } else if (this.gameResult === ficha2Resultado(jugador)) {\n                    this.tablero.imprimirTablero();\n                    console.log(\"Felicidades! Su agente ha ganado.\");\n                }\n                break;\n            }\n\n            turno = 2 - turno + 1;\n            jugadas--;\n        } while (jugadas > 0);\n    }\n}","export enum Modo {\n    SinSeleccionar,\n    Humano,\n    Estrategia\n}","import React, {useState} from \"react\";\nimport configuracionParametros from \"../modelos/configuracionParametros\";\nimport {Button, Col, Form, Row} from \"react-bootstrap\";\nimport {Estrategia} from \"../modelos/estrategia\";\nimport RLAgent from \"../algoritmos/RLAgent\";\n\ntype ParametrosProps = {\n    onElegirEstrategia: (parametros: configuracionParametros) => void,\n    onLimpiarTablero: () => void\n}\n\nexport const Parametros = ({onElegirEstrategia, onLimpiarTablero}: ParametrosProps) => {\n    // Variables\n    const [estrategia, setEstrategia] = useState(Estrategia.Minimax);\n    const [nivel, setNivel] = useState(3);\n    const [qRate, setRate] = useState(0.5);\n    const [trainN, setTrainN] = useState(10000);\n\n    // Handlers\n    const elegirEstrategia = () => {\n        // Iniciar el juego\n        onElegirEstrategia({\n            estrategia: estrategia,\n            nivel: nivel,\n            qRate: qRate,\n        });\n    }\n\n    const clickEntrenarAgente = () => {\n        // Entrenar al agente\n        RLAgent.Agente = new RLAgent(trainN);\n        RLAgent.Agente.qRate = qRate;\n\n        for (let i=0; i < trainN; i++) {\n            RLAgent.Agente.reset(true);\n            RLAgent.Agente.updateAlpha(i);\n            RLAgent.Agente.jugarVsRandom();\n        }\n    }\n\n    // Render\n    return (\n        <Form>\n            <Row>\n                <Col>\n                    <Row>\n                        <Form.Group className=\"mb-3\">\n                            <Form.Label>Estrategia</Form.Label>\n                            <Form.Select\n                                value={estrategia}\n                                onChange={ (event) => setEstrategia(parseInt(event.currentTarget.value)) }>\n                                <option value={Estrategia.Minimax}>Minimax</option>\n                                <option value={Estrategia.Alfabeta}>Poda Alfa-beta</option>\n                                <option value={Estrategia.RLAgent}>Agente RL</option>\n                            </Form.Select>\n                        </Form.Group>\n                    </Row>\n                    <Row>\n                        <Form.Group className=\"mb-3\">\n                            <Form.Label>N Entrenamiento (Solo para RL)</Form.Label>\n                            <Form.Control value={trainN}\n                                          type=\"number\"\n                                          disabled={estrategia !== Estrategia.RLAgent}\n                                          onChange={ event => setTrainN(parseInt(event.currentTarget.value))}/>\n                        </Form.Group>\n                    </Row>\n                </Col>\n                <Col>\n                    <Row>\n                        <Form.Group className=\"mb-3\">\n                            <Form.Label>Nivel de búsqueda</Form.Label>\n                            <Form.Control value={nivel}\n                                          type=\"number\"\n                                          onChange={ event => setNivel(parseInt(event.currentTarget.value))}/>\n                        </Form.Group>\n                    </Row>\n                    <Row>\n                        <Form.Group className=\"mb-3\">\n                            <Form.Label>Q Rate (Solo para RL)</Form.Label>\n                            <Form.Control value={qRate}\n                                          type=\"number\"\n                                          max={1.0}\n                                          disabled={estrategia !== Estrategia.RLAgent}\n                                          onChange={ event => setRate(parseFloat(event.currentTarget.value))}/>\n                        </Form.Group>\n                    </Row>\n                </Col>\n            </Row>\n            <Row>\n                <Col>\n                    <Button variant=\"primary\"\n                            onClick={elegirEstrategia}>Elegir Estrategia</Button>\n                    <Button variant=\"secondary\"\n                            onClick={clickEntrenarAgente}\n                            disabled={estrategia !== Estrategia.RLAgent}\n                            className=\"ms-3\">Entrenar RL</Button>\n                </Col>\n            </Row>\n        </Form>\n    )\n}","import Tablero from \"../modelos/tablero\";\nimport {Resultado} from \"../modelos/resultado\";\nimport {Ficha} from \"../modelos/ficha\";\n\nexport default class MinMax {\n    n: number\n    tablero: Tablero = new Tablero();\n    jugadorAgente = Ficha.Rojo;\n    turnosMaximos = 42;\n    gameResult: Resultado = Resultado.SinGanador;\n    expansiones: number = 0;\n\n    constructor(n: number) {\n        this.n = n;\n    }\n\n    reset() {\n        this.tablero = new Tablero();\n        this.gameResult = Resultado.SinGanador;\n    }\n\n    calcularF(tablero: Tablero, jugador: Ficha): number {\n        let count: number[] = Array(3).fill(0);\n\n        // Recorre el tablero horizontalmente\n        for (let i = 0; i < tablero.posiciones.length; i++) {\n            let libre = false;\n            let conecta = 0;\n            let anterior = -1;\n            for (let j = 0; j < tablero.posiciones[0].length; j++) {\n                let actual = tablero.posiciones[i][j];\n                if (actual === anterior && actual !== Ficha.Vacio) {\n                    conecta++;\n                } else {\n                    if ((libre || actual === Ficha.Vacio) && conecta > 0) {\n                        if (actual === jugador) {\n                            if (conecta > 3) return Number.MAX_SAFE_INTEGER;\n                            count[conecta - 1]++;\n                        } else {\n                            if (conecta > 3) return Number.MIN_SAFE_INTEGER;\n                            count[conecta - 1]--;\n                        }\n                    }\n                    libre = actual === Ficha.Vacio;\n                    conecta = 0;\n                }\n                anterior = actual;\n            }\n        }\n\n        // Recorre el tablero verticalmente\n        for (let i = 0; i < tablero.posiciones[0].length; i++) {\n            let libre = false;\n            let conecta = 0;\n            let anterior = -1;\n            for (let j = 0; j < tablero.posiciones.length; j++) {\n                let actual = tablero.posiciones[j][i];\n                if (actual === anterior && actual !== Ficha.Vacio) {\n                    conecta++;\n                } else {\n                    if ((libre || actual === Ficha.Vacio) && conecta > 0) {\n                        if (actual === jugador) {\n                            if (conecta > 3) return Number.MAX_SAFE_INTEGER;\n                            count[conecta - 1]++;\n                        } else {\n                            if (conecta > 3) return Number.MIN_SAFE_INTEGER;\n                            count[conecta - 1]--;\n                        }\n                    }\n                    libre = (actual === Ficha.Vacio);\n                    conecta = 0;\n                }\n                anterior = actual;\n            }\n        }\n\n        // Recorre la diagonal secundaria\n        for (let i = 3; i < tablero.posiciones.length + tablero.posiciones[0].length - 4; i++) {\n            let libre = false;\n            let conecta = 0;\n            let anterior = -1;\n            for (let j = Math.max(0, i - tablero.posiciones.length + 1); j < Math.min(i + 1, tablero.posiciones[0].length); j++) {\n                let actual = tablero.posiciones[i - j][j];\n                if (actual === anterior && actual !== Ficha.Vacio) {\n                    conecta++;\n                } else {\n                    if ((libre || actual === Ficha.Vacio) && conecta > 0) {\n                        if (actual === jugador) {\n                            if (conecta > 3) return Number.MAX_SAFE_INTEGER;\n                            count[conecta - 1]++;\n                        } else {\n                            if (conecta > 3) return Number.MIN_SAFE_INTEGER;\n                            count[conecta - 1]--;\n                        }\n                    }\n                    libre = (actual === Ficha.Vacio);\n                    conecta = 0;\n                }\n                anterior = actual;\n            }\n        }\n\n        // Recorre la diagonal primaria\n        for (let i = 3; i < tablero.posiciones.length + tablero.posiciones[0].length - 4; i++) {\n            let libre = false;\n            let conecta = 0;\n            let anterior = -1;\n            for (let j = Math.max(0, i - tablero.posiciones.length + 1); j < Math.min(i + 1, tablero.posiciones[0].length); j++) {\n                let actual = tablero.posiciones[tablero.posiciones.length - 1 - i + j][j];\n                if (actual === anterior && actual !== Ficha.Vacio) {\n                    conecta++;\n                } else {\n                    if ((libre || actual === Ficha.Vacio) && conecta > 0) {\n                        if (actual === jugador) {\n                            if (conecta > 3) return Number.MAX_SAFE_INTEGER;\n                            count[conecta - 1]++;\n                        } else {\n                            if (conecta > 3) return Number.MIN_SAFE_INTEGER;\n                            count[conecta - 1]--;\n                        }\n                    }\n                    libre = (actual === Ficha.Vacio);\n                    conecta = 0;\n                }\n                anterior = actual;\n            }\n        }\n\n        // calcula la suma ponderada\n        let pesos = [0.25, 0.5, 1.0];\n        return count.reduce((r, a, i) => r + a * pesos[i], 0);\n    }\n\n    jugarElitista(jugador: Ficha): void {\n        let prob = 0, columna = 0, columnas: number[] = [];\n        let maxProb = Number.MIN_SAFE_INTEGER;\n\n        // Elegir fila disponible con max reward\n        for (let j = 0; j < this.tablero.posiciones[0].length; j++) {\n            if (this.tablero.posiciones[this.tablero.posiciones.length - 1][j] !== Ficha.Vacio) continue;\n            let i = this.tablero.posiciones.length - 1;\n            while (i > 0 && this.tablero.posiciones[i - 1][j] === Ficha.Vacio) i--;\n\n            this.tablero.posiciones[i][j] = jugador;\n            prob = this.minValue(this.tablero, jugador, this.n);\n\n            if (prob > maxProb) {\n                maxProb = prob;\n                columnas = [j];\n            } else if (prob === maxProb) {\n                columnas.push(j);\n            }\n            this.tablero.posiciones[i][j] = 0;\n        }\n\n        // Rompe empates entre columnas\n        if (columnas.length === 1) {\n            columna = columnas[0];\n        } else {\n            if (columnas.length === 0) {\n                for (let i = 0; i < this.tablero.posiciones[0].length; i++) {\n                    if (this.tablero.posiciones[this.tablero.posiciones.length-1][i] === 0) {\n                        columnas.push(i);\n                    }\n                }\n            }\n            columna = columnas[Math.floor(Math.random() * columnas.length)];\n        }\n\n        // Aplicar jugada\n        let fila = this.tablero.posiciones.length - 1;\n        while (fila > 0 && this.tablero.posiciones[fila - 1][columna] === Ficha.Vacio) fila--;\n        this.tablero.posiciones[fila][columna] = jugador;\n    }\n\n    maxValue(tablero: Tablero, jugador: Ficha, n: number): number {\n        if (n === 0) return this.calcularF(tablero, jugador);\n        let resultado = tablero.calcularResultado();\n        if (resultado.valueOf() === jugador.valueOf()) return Number.MAX_SAFE_INTEGER;\n        else if (resultado.valueOf() === (jugador % 2) + 1) return Number.MIN_SAFE_INTEGER;\n\n        let prob;\n        let maxProb = Number.MIN_SAFE_INTEGER;\n\n        // elegir fila disponible con max reward\n        for (let j = 0; j < this.tablero.posiciones[0].length; j++) {\n            if (this.tablero.posiciones[this.tablero.posiciones.length - 1][j] !== Ficha.Vacio) continue;\n            let i = this.tablero.posiciones.length - 1;\n            while (i > 0 && this.tablero.posiciones[i - 1][j] === Ficha.Vacio) i--;\n\n            this.expansiones++;\n            this.tablero.posiciones[i][j] = jugador;\n            prob = this.minValue(this.tablero, jugador, n - 1);\n            if (prob > maxProb) {\n                maxProb = prob;\n                //columna = j;\n            }\n            this.tablero.posiciones[i][j] = Ficha.Vacio;\n        }\n\n        return maxProb;\n    }\n\n    minValue(tablero: Tablero, jugador: Ficha, n: number): number {\n        if (n === 0) return this.calcularF(tablero, jugador);\n        let resultado = tablero.calcularResultado();\n        if (resultado.valueOf() === jugador.valueOf()) return Number.MAX_SAFE_INTEGER;\n        else if (resultado === (jugador % 2) + 1) return Number.MIN_SAFE_INTEGER;\n\n        let prob = 0;\n        let minProb = Number.MAX_SAFE_INTEGER;\n\n        // elegir fila disponible con min reward\n        for (let j = 0; j < this.tablero.posiciones[0].length; j++) {\n            if (this.tablero.posiciones[this.tablero.posiciones.length - 1][j] !== Ficha.Vacio) continue;\n            let i = this.tablero.posiciones.length - 1;\n            while (i > 0 && this.tablero.posiciones[i - 1][j] === Ficha.Vacio) i--;\n\n            this.expansiones++;\n            this.tablero.posiciones[i][j] = (jugador % 2) + 1;\n            prob = this.maxValue(this.tablero, jugador, n - 1);\n            if (prob < minProb) {\n                minProb = prob;\n                //columna = j;\n            }\n            this.tablero.posiciones[i][j] = Ficha.Vacio;\n        }\n\n        return minProb;\n    }\n\n    jugarHumano(jugador: Ficha): void {\n        // lee una casilla disponible\n        this.tablero.imprimirTablero();\n        let columnas = [];\n        for (let i = 0; i < this.tablero.posiciones[0].length; i++) {\n            if (this.tablero.posiciones[this.tablero.posiciones.length-1][i] === Ficha.Vacio) {\n                columnas.push(i);\n            }\n        }\n        let columna;\n        do {\n            const prompt = require('prompt-sync')();\n            console.log(columnas);\n            columna = parseInt(prompt('Cual es su jugada? '));\n        } while (!(columna in columnas));\n\n        // aplicar jugada\n        let fila = this.tablero.posiciones.length - 1;\n        while (fila > 0 && this.tablero.posiciones[fila-1][columna] === Ficha.Vacio) fila--;\n        this.tablero.posiciones[fila][columna] = jugador;\n    }\n\n    jugarVsHumano(): void {\n        let jugador = this.jugadorAgente;\n        let contrario = (jugador % 2) + 1;\n        let turno = 1;\n        let jugadas = this.turnosMaximos;\n\n        do {\n            if (turno === jugador) {\n                this.jugarElitista(jugador);\n            } else {\n                this.jugarHumano(contrario);\n            }\n\n            //actualizar resultado\n            this.gameResult = this.tablero.calcularResultado();\n            if (this.gameResult > 0) { //ya hay resultado\n                if (this.gameResult.valueOf() !== jugador.valueOf()) //perdimos, actualizar tablero\n                {\n                    console.log(\"Felicidades! Usted ha ganado.\");\n                } else if (this.gameResult.valueOf() === jugador.valueOf()) {\n                    this.tablero.imprimirTablero();\n                    console.log(\"Felicidades! Su agente ha ganado.\");\n                }\n                break;\n            }\n\n            turno = 2 - turno + 1;\n            jugadas--;\n        } while (jugadas > 0);\n    }\n}","import Tablero from \"../modelos/tablero\";\nimport {Ficha} from \"../modelos/ficha\";\nimport {Resultado} from \"../modelos/resultado\";\n\nexport default class AlfaBeta {\n    n: number\n    tablero: Tablero = new Tablero();\n    jugadorAgente = Ficha.Rojo;\n    turnosMaximos = 42;\n    gameResult: Resultado = Resultado.SinGanador;\n    expansiones: number = 0;\n\n    constructor(n: number) {\n        this.n = n;\n    }\n\n    reset() {\n        this.tablero = new Tablero();\n        this.gameResult = Resultado.SinGanador;\n    }\n\n    calcularF(tablero: Tablero, jugador: Ficha): number {\n        let count: number[] = Array(3).fill(0);\n\n        // Recorre el tablero horizontalmente\n        for (let i = 0; i < tablero.posiciones.length; i++) {\n            let libre = false;\n            let conecta = 0;\n            let anterior = -1;\n            for (let j = 0; j < tablero.posiciones[0].length; j++) {\n                let actual = tablero.posiciones[i][j];\n                if (actual === anterior && actual !== Ficha.Vacio) {\n                    conecta++;\n                } else {\n                    if ((libre || actual === Ficha.Vacio) && conecta > 0) {\n                        if (actual === jugador) {\n                            if (conecta > 3) return Number.MAX_SAFE_INTEGER;\n                            count[conecta - 1]++;\n                        } else {\n                            if (conecta > 3) return Number.MIN_SAFE_INTEGER;\n                            count[conecta - 1]--;\n                        }\n                    }\n                    libre = actual === Ficha.Vacio;\n                    conecta = 0;\n                }\n                anterior = actual;\n            }\n        }\n\n        // Recorre el tablero verticalmente\n        for (let i = 0; i < tablero.posiciones[0].length; i++) {\n            let libre = false;\n            let conecta = 0;\n            let anterior = -1;\n            for (let j = 0; j < tablero.posiciones.length; j++) {\n                let actual = tablero.posiciones[j][i];\n                if (actual === anterior && actual !== Ficha.Vacio) {\n                    conecta++;\n                } else {\n                    if ((libre || actual === Ficha.Vacio) && conecta > 0) {\n                        if (actual === jugador) {\n                            if (conecta > 3) return Number.MAX_SAFE_INTEGER;\n                            count[conecta - 1]++;\n                        } else {\n                            if (conecta > 3) return Number.MIN_SAFE_INTEGER;\n                            count[conecta - 1]--;\n                        }\n                    }\n                    libre = (actual === Ficha.Vacio);\n                    conecta = 0;\n                }\n                anterior = actual;\n            }\n        }\n\n        // Recorre la diagonal secundaria\n        for (let i = 3; i < tablero.posiciones.length + tablero.posiciones[0].length - 4; i++) {\n            let libre = false;\n            let conecta = 0;\n            let anterior = -1;\n            for (let j = Math.max(0, i - tablero.posiciones.length + 1); j < Math.min(i + 1, tablero.posiciones[0].length); j++) {\n                let actual = tablero.posiciones[i - j][j];\n                if (actual === anterior && actual !== Ficha.Vacio) {\n                    conecta++;\n                } else {\n                    if ((libre || actual === Ficha.Vacio) && conecta > 0) {\n                        if (actual === jugador) {\n                            if (conecta > 3) return Number.MAX_SAFE_INTEGER;\n                            count[conecta - 1]++;\n                        } else {\n                            if (conecta > 3) return Number.MIN_SAFE_INTEGER;\n                            count[conecta - 1]--;\n                        }\n                    }\n                    libre = (actual === Ficha.Vacio);\n                    conecta = 0;\n                }\n                anterior = actual;\n            }\n        }\n\n        // Recorre la diagonal primaria\n        for (let i = 3; i < tablero.posiciones.length + tablero.posiciones[0].length - 4; i++) {\n            let libre = false;\n            let conecta = 0;\n            let anterior = -1;\n            for (let j = Math.max(0, i - tablero.posiciones.length + 1); j < Math.min(i + 1, tablero.posiciones[0].length); j++) {\n                let actual = tablero.posiciones[tablero.posiciones.length - 1 - i + j][j];\n                if (actual === anterior && actual !== Ficha.Vacio) {\n                    conecta++;\n                } else {\n                    if ((libre || actual === Ficha.Vacio) && conecta > 0) {\n                        if (actual === jugador) {\n                            if (conecta > 3) return Number.MAX_SAFE_INTEGER;\n                            count[conecta - 1]++;\n                        } else {\n                            if (conecta > 3) return Number.MIN_SAFE_INTEGER;\n                            count[conecta - 1]--;\n                        }\n                    }\n                    libre = (actual === Ficha.Vacio);\n                    conecta = 0;\n                }\n                anterior = actual;\n            }\n        }\n\n        // calcula la suma ponderada\n        let pesos = [0.25, 0.5, 1.0];\n        return count.reduce((r, a, i) => r + a * pesos[i], 0);\n    }\n\n    jugarElitista(jugador: Ficha): void {\n        let prob = 0, columna = 0, columnas: number[] = [];\n        let maxProb = Number.MIN_SAFE_INTEGER;\n\n        // Elegir fila disponible con max reward\n        for (let j = 0; j < this.tablero.posiciones[0].length; j++) {\n            if (this.tablero.posiciones[this.tablero.posiciones.length - 1][j] !== Ficha.Vacio) continue;\n            let i = this.tablero.posiciones.length - 1;\n            while (i > 0 && this.tablero.posiciones[i - 1][j] === Ficha.Vacio) i--;\n\n            this.tablero.posiciones[i][j] = jugador;\n            prob = this.minValue(this.tablero, jugador, this.n, Number.MIN_SAFE_INTEGER, Number.MAX_SAFE_INTEGER);\n\n            if (prob > maxProb) {\n                maxProb = prob;\n                columnas = [j];\n            } else if (prob === maxProb) {\n                columnas.push(j);\n            }\n            this.tablero.posiciones[i][j] = 0;\n        }\n\n        // Rompe empates entre columnas\n        if (columnas.length === 1) {\n            columna = columnas[0];\n        } else {\n            if (columnas.length === 0) {\n                for (let i = 0; i < this.tablero.posiciones[0].length; i++) {\n                    if (this.tablero.posiciones[this.tablero.posiciones.length-1][i] === 0) {\n                        columnas.push(i);\n                    }\n                }\n            }\n            columna = columnas[Math.floor(Math.random() * columnas.length)];\n        }\n\n        // Aplicar jugada\n        let fila = this.tablero.posiciones.length - 1;\n        while (fila > 0 && this.tablero.posiciones[fila - 1][columna] === Ficha.Vacio) fila--;\n        this.tablero.posiciones[fila][columna] = jugador;\n    }\n\n    maxValue(tablero: Tablero, jugador: Ficha, n: number, alfa: number, beta: number): number {\n        if (n === 0) return this.calcularF(tablero, jugador);\n        let resultado = tablero.calcularResultado();\n        if (resultado.valueOf() === jugador.valueOf()) return Number.MAX_SAFE_INTEGER;\n        else if (resultado.valueOf() === (jugador % 2) + 1) return Number.MIN_SAFE_INTEGER;\n\n        let prob;\n        let maxProb = Number.MIN_SAFE_INTEGER;\n\n        // elegir fila disponible con max reward\n        for (let j = 0; j < this.tablero.posiciones[0].length; j++) {\n            if (this.tablero.posiciones[this.tablero.posiciones.length - 1][j] !== Ficha.Vacio) continue;\n            let i = this.tablero.posiciones.length - 1;\n            while (i > 0 && this.tablero.posiciones[i - 1][j] === Ficha.Vacio) i--;\n\n            this.expansiones++; // Se realiza la expansión\n            this.tablero.posiciones[i][j] = jugador;\n            prob = this.minValue(this.tablero, jugador, n - 1, alfa, beta);\n            if (prob > maxProb) {\n                maxProb = prob;\n                //columna = j;\n            }\n            this.tablero.posiciones[i][j] = Ficha.Vacio;\n\n            // Podar\n            if (maxProb >= beta) return maxProb;\n            if (maxProb > alfa) alfa = maxProb;\n        }\n\n        return maxProb;\n    }\n\n    minValue(tablero: Tablero, jugador: Ficha, n: number, alfa: number, beta: number): number {\n        if (n === 0) return this.calcularF(tablero, jugador);\n        let resultado = tablero.calcularResultado();\n        if (resultado.valueOf() === jugador.valueOf()) return Number.MAX_SAFE_INTEGER;\n        else if (resultado === (jugador % 2) + 1) return Number.MIN_SAFE_INTEGER;\n\n        let prob = 0;\n        let minProb = Number.MAX_SAFE_INTEGER;\n\n        // elegir fila disponible con min reward\n        for (let j = 0; j < this.tablero.posiciones[0].length; j++) {\n            if (this.tablero.posiciones[this.tablero.posiciones.length - 1][j] !== Ficha.Vacio) continue;\n            let i = this.tablero.posiciones.length - 1;\n            while (i > 0 && this.tablero.posiciones[i - 1][j] === Ficha.Vacio) i--;\n\n            this.expansiones++; // Se realiza la expansión\n            this.tablero.posiciones[i][j] = (jugador % 2) + 1;\n            prob = this.maxValue(this.tablero, jugador, n - 1, alfa, beta);\n            if (prob < minProb) {\n                minProb = prob;\n                //columna = j;\n            }\n            this.tablero.posiciones[i][j] = Ficha.Vacio;\n\n            if (minProb <= alfa) return minProb;\n            if (minProb < beta) beta = minProb;\n        }\n\n        return minProb;\n    }\n\n    jugarHumano(jugador: Ficha): void {\n        // lee una casilla disponible\n        this.tablero.imprimirTablero();\n        let columnas = [];\n        for (let i = 0; i < this.tablero.posiciones[0].length; i++) {\n            if (this.tablero.posiciones[this.tablero.posiciones.length-1][i] === Ficha.Vacio) {\n                columnas.push(i);\n            }\n        }\n        let columna;\n        do {\n            const prompt = require('prompt-sync')();\n            console.log(columnas);\n            columna = parseInt(prompt('Cual es su jugada? '));\n        } while (!(columna in columnas));\n\n        // aplicar jugada\n        let fila = this.tablero.posiciones.length - 1;\n        while (fila > 0 && this.tablero.posiciones[fila-1][columna] === Ficha.Vacio) fila--;\n        this.tablero.posiciones[fila][columna] = jugador;\n    }\n\n    jugarVsHumano(): void {\n        let jugador = this.jugadorAgente;\n        let contrario = (jugador % 2) + 1;\n        let turno = 1;\n        let jugadas = this.turnosMaximos;\n\n        do {\n            if (turno === jugador) {\n                this.jugarElitista(jugador);\n            } else {\n                this.jugarHumano(contrario);\n            }\n\n            //actualizar resultado\n            this.gameResult = this.tablero.calcularResultado();\n            if (this.gameResult > 0) { //ya hay resultado\n                if (this.gameResult.valueOf() !== jugador.valueOf()) //perdimos, actualizar tablero\n                {\n                    console.log(\"Felicidades! Usted ha ganado.\");\n                } else if (this.gameResult.valueOf() === jugador.valueOf()) {\n                    this.tablero.imprimirTablero();\n                    console.log(\"Felicidades! Su agente ha ganado.\");\n                }\n                break;\n            }\n\n            turno = 2 - turno + 1;\n            jugadas--;\n        } while (jugadas > 0);\n    }\n}","import {Estrategia} from \"./estrategia\";\n\nexport class ResultadoEjecucion {\n    n: number;\n    algoritmo: Estrategia;\n    tiempo: number;\n    nodos_expandidos: number;\n\n\n    constructor(n: number, algoritmo: Estrategia, tiempo: number, nodos_expandidos: number) {\n        this.n = n;\n        this.algoritmo = algoritmo;\n        this.tiempo = tiempo;\n        this.nodos_expandidos = nodos_expandidos;\n    }\n}","// Basado en https://github.com/Cono52/connect-four-react\nimport React, {useEffect, useState} from \"react\";\nimport {Ficha} from \"../modelos/ficha\";\nimport Tablero from \"../modelos/tablero\";\nimport {Modo} from \"../modelos/modo\";\nimport {Resultado} from \"../modelos/resultado\";\nimport configuracionParametros from \"../modelos/configuracionParametros\";\nimport {jugarEstrategia} from \"../algoritmos/jugadorEstrategia\";\nimport {ResultadoEjecucion} from \"../modelos/ResultadoEjecucion\";\nimport {Estrategia} from \"../modelos/estrategia\";\nimport RLAgent from \"../algoritmos/RLAgent\";\n\ntype AgujeroProps = {\n    fichaValor: Ficha\n};\n\ntype ColumnaProps = {\n    handleClick: () => void,\n    agujeros: Ficha[]\n};\n\ntype TableroProps = {\n    parametros: configuracionParametros,\n    grabarResultado: (resultado: ResultadoEjecucion) => void\n}\n\nconst Agujero = ({fichaValor}: AgujeroProps) => {\n    return (\n        <div className=\"Agujero\">\n            <div className={Ficha[fichaValor]}>\n\n            </div>\n        </div>\n    );\n};\n\nconst Columna = ({handleClick, agujeros}: ColumnaProps) => {\n    return (\n        <div className=\"Columna\" onClick={() => handleClick()}>\n            {\n                [...Array(agujeros.length)].map((_, j) =>\n                    (<Agujero fichaValor={agujeros[j]} key={j}/>)\n                ).reverse()\n            }\n        </div>\n    );\n};\n\n\nexport const TableroGrafico = ({parametros, grabarResultado}: TableroProps) => {\n    // Constantes\n    const FICHA_ESTRATEGIA = Ficha.Amarillo;\n    const FICHA_HUMANO = Ficha.Rojo;\n\n    // Estados\n    const [tablero, setTablero] = useState(new Tablero());\n    const [turno, setTurno] = useState(Ficha.Rojo);\n    const [modo, setModo] = useState(Modo.SinSeleccionar);\n    const [ganador, setGanador] = useState('');\n\n    // Función para seleccionar modo\n    const seleccionarModo = (modo: Modo) => {\n        setModo(modo);\n        setTablero(new Tablero());\n        setTurno(Ficha.Rojo);\n    }\n\n    // Función para hacer un movimiento\n    const hacerMovimiento = (idxColumna: number) => {\n        if (tablero.verificarColumnaLibre(idxColumna) && tablero.calcularResultado() === Resultado.SinGanador) {\n            const copiaTablero = new Tablero();\n            copiaTablero.posiciones = JSON.parse(JSON.stringify(tablero.posiciones));\n            copiaTablero.tirarFicha(idxColumna, turno);\n            setTablero(copiaTablero);\n            setTurno(turno === Ficha.Rojo ? Ficha.Amarillo : Ficha.Rojo);\n        } else {\n            console.log(\"Movimiento invalido\");\n        }\n    }\n\n    // Crear las columnas\n    let columnas = [...Array(tablero.posiciones[0].length)].map((_, i) => (\n        <Columna handleClick={() => hacerMovimiento(i)}\n                 agujeros={tablero.posiciones.map(value => value[i])}\n                 key={i}/>\n    ));\n\n    // Crear estilo del ganador\n    let estiloGanador = ganador !== '' ? \"mensajeGanador aparecer\" : \"mensajeGanador\";\n\n    // Ejecutar cuando se cambia de turno\n    useEffect(() => {\n        let ganadorTentador = tablero.calcularResultado();\n        switch (ganadorTentador) {\n            case Resultado.Empate:\n                setGanador(\"ninguno\");\n                break;\n            case Resultado.GanadorRojo:\n                setGanador(\"Rojo\");\n                break;\n            case Resultado.GanadorAmarillo:\n                setGanador(\"Amarillo\");\n                break;\n            case Resultado.SinGanador:\n            // El juego continua, el siguiente jugador hace su movimiento si es una estrategia\n                if (modo === Modo.Estrategia && turno === FICHA_ESTRATEGIA) {\n                    // Jugar estrategia\n                    let t0 = performance.now(); // Tiempo de Inicio de algoritmo\n                    const [nuevoTablero, nodos] = jugarEstrategia(tablero, parametros, turno);\n                    let t1 = performance.now(); // Tiempo de Fin de algoritmo\n                    setTablero(nuevoTablero);\n                    setTurno(FICHA_HUMANO);\n\n                    // Grabar el resultado\n                    let nivel = parametros.estrategia === Estrategia.RLAgent ? RLAgent.Agente.n : parametros.nivel;\n                    const res = new ResultadoEjecucion(nivel, parametros.estrategia, t1-t0, nodos);\n                    grabarResultado(res);\n                }\n\n        }\n        // eslint-disable-next-line\n    }, [turno, tablero]);\n\n    return (\n        <div className=\"TableroGrafico\">\n            {modo !== Modo.SinSeleccionar &&\n            <div className=\"Tablero\">\n                {columnas}\n            </div>\n            }\n            {(modo === Modo.SinSeleccionar) &&\n            <div>\n                <button className=\"btn btn-primary mx-3\" onClick={() => seleccionarModo(Modo.Humano)}>Jugar Humano</button>\n                <button className=\"btn btn-primary mx-3\" onClick={() => seleccionarModo(Modo.Estrategia)}>Jugar Estrategia</button>\n            </div>\n            }\n            <div className={estiloGanador}>Gana {ganador}!</div>\n        </div>\n    );\n};","import Tablero from \"../modelos/tablero\";\nimport {Estrategia} from \"../modelos/estrategia\";\nimport {Ficha} from \"../modelos/ficha\";\nimport configuracionParametros from \"../modelos/configuracionParametros\";\nimport MinMax from \"./MinMax\";\nimport AlfaBeta from \"./AlfaBeta\";\nimport RLAgent from \"./RLAgent\";\n\nexport const jugarEstrategia = (tablero: Tablero, parametros: configuracionParametros, jugador: Ficha): [Tablero, number] => {\n    const nuevoTablero = new Tablero();\n    nuevoTablero.posiciones = JSON.parse(JSON.stringify(tablero.posiciones)); // Copiar posiciones\n\n    // Seleccionar estrategia\n    let agente: MinMax | AlfaBeta | RLAgent;\n\n    switch (parametros.estrategia) {\n        case Estrategia.Minimax:\n            agente = new MinMax(parametros.nivel);\n            break\n        case Estrategia.Alfabeta:\n            agente = new AlfaBeta(parametros.nivel);\n            break\n        case Estrategia.RLAgent:\n            agente = RLAgent.Agente;\n            agente.reset(false);\n            break\n        default:\n            agente = new MinMax(parametros.nivel);\n            break\n    }\n\n    // Configurar agente\n    agente.tablero = nuevoTablero;\n\n    // Realizar jugada elitista / validación\n    agente.jugarElitista(jugador);\n\n    return [agente.tablero, agente.expansiones];\n}","import {Estrategia} from \"./estrategia\";\n\nexport default class configuracionParametros {\n    estrategia: Estrategia = Estrategia.Minimax;\n    nivel: number = 3;\n    qRate: number = 0.5;\n}","import React from \"react\";\nimport {ResultadoEjecucion} from \"../modelos/ResultadoEjecucion\";\nimport {Table} from \"react-bootstrap\";\nimport {Estrategia} from \"../modelos/estrategia\";\n\ntype ResultadosProps = {\n    resultados: ResultadoEjecucion[]\n}\n\nexport const TablaResultados = ({ resultados }: ResultadosProps) => {\n    return (\n        <Table striped bordered hover variant=\"dark\">\n            <thead>\n            <tr>\n                <th>Nº Jugada</th>\n                <th>N</th>\n                <th>Algoritmo</th>\n                <th>Tiempo de Ejecución (ms)</th>\n                <th>Nodos Expandidos</th>\n            </tr>\n            </thead>\n            <tbody>\n            {\n                resultados.map( (resultado, idx) =>\n                    <tr key={idx}>\n                        <td>{idx}</td>\n                        <td>{resultado.n}</td>\n                        <td>{Estrategia[resultado.algoritmo]}</td>\n                        <td>{resultado.tiempo}</td>\n                        <td>{resultado.nodos_expandidos}</td>\n                    </tr>)\n            }\n            </tbody>\n        </Table>\n    )\n}","import './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {Container, Row} from \"react-bootstrap\";\nimport {Parametros} from \"./componentes/Parametros\";\nimport {TableroGrafico} from \"./componentes/TableroGrafico\";\nimport {useState} from \"react\";\nimport configuracionParametros from \"./modelos/configuracionParametros\";\nimport {TablaResultados} from \"./componentes/TablaResultados\";\n\nconst algoritmos = [\"Minimax\", \"RLAgent\", \"Banana\"]\n\nfunction App() {\n  // Variables\n  const [parametros, setParametros] = useState(new configuracionParametros());\n  const [resultados, setResultados] = useState([]);\n\n\n  // Handlers\n  const cambiarParametros = parametros => {\n    // Do something\n    setParametros(parametros);\n  }\n\n  const limpiarTablero = () => {\n    // Do something\n  }\n\n  const grabarResultado = (resultado) => {\n    setResultados( prevState => {\n      const newState = JSON.parse(JSON.stringify(prevState));\n      newState.push(resultado);\n      return newState;\n    });\n  }\n\n\n  // Render\n  return (\n    <div className=\"App p-3\">\n      <Container>\n        <h3 className=\"text-start h2 mb-3\">Connect-4</h3>\n        {/* Parametros*/}\n        <hr/>\n        <h4>Parámetros del problema</h4>\n        <Row className=\"mt-3\">\n          <Parametros\n              onElegirEstrategia={cambiarParametros}\n              onLimpiarTablero={limpiarTablero}\n              algoritmos={algoritmos}/>\n        </Row>\n        {/* Tablero */}\n        <hr/>\n        <h4>Tablero</h4>\n        <Row className=\"mt-3\">\n          <TableroGrafico parametros={parametros} grabarResultado={grabarResultado}/>\n        </Row>\n        {/* Resultados */}\n        <hr/>\n        <h4>Resultados</h4>\n        <Row className=\"mt-3\">\n          <TablaResultados resultados={resultados}/>\n        </Row>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}