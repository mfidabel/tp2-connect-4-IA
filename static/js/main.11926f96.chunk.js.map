{"version":3,"sources":["modelos/estrategia.ts","modelos/ficha.ts","modelos/resultado.ts","modelos/tablero.ts","algoritmos/MinMax.ts","algoritmos/AlfaBeta.ts","algoritmos/RLAgent.ts","modelos/modo.ts","componentes/Parametros.tsx","modelos/ResultadoEjecucion.ts","algoritmos/jugadorEstrategia.ts","componentes/TableroGrafico.tsx","modelos/configuracionParametros.ts","componentes/TablaResultados.tsx","experimentos/MiniMaxVsAlfaBeta.ts","experimentos/MiniMaxVsRL.ts","componentes/Experimento.tsx","experimentos/RLvsRL.ts","App.js","reportWebVitals.js","index.js"],"names":["Estrategia","Ficha","Resultado","ficha2Resultado","ficha","Rojo","GanadorRojo","Amarillo","GanadorAmarillo","SinGanador","Tablero","posiciones","this","Array","fill","undefined","map","Vacio","anterior","conecta","i","length","j","actual","Math","max","min","Empate","line","concat","valueOf","console","log","columna","jugador","error","verificarColumnaLibre","idxFila","findIndex","fila","MinMax","n","tablero","jugadorAgente","turnosMaximos","gameResult","expansiones","count","libre","Number","MAX_SAFE_INTEGER","MIN_SAFE_INTEGER","pesos","reduce","r","a","prob","columnas","maxProb","minValue","push","floor","random","calcularF","resultado","calcularResultado","minProb","maxValue","imprimirTablero","prompt","require","parseInt","contrario","turno","jugadas","jugarElitista","jugarHumano","AlfaBeta","alfa","beta","RLAgent","lastTablero","entrenar","alpha","lookupTable","Map","qRate","getProbability","tableroSerializado","toString","has","set","get","nextStateProb","calcularR","updateProbability","copiarTablero","tableroOrigen","tableroDestino","currentGame","jugarRandom","nivel","estrategia","minimax","Minimax","Alfabeta","Agente","AgenteB","Modo","Parametros","onElegirEstrategia","onLimpiarTablero","useState","estrategiaA","setEstrategiaA","nivelA","setNivelA","qRateA","setRateA","trainNA","setTrainNA","estrategiaB","setEstrategiaB","nivelB","setNivelB","qRateB","setRateB","trainNB","setTrainNB","useEffect","Form","Row","Col","Group","className","Label","Select","value","onChange","event","currentTarget","Control","type","disabled","parseFloat","Button","variant","onClick","reset","updateAlpha","jugarVsRandom","jugarVsMinimax","ResultadoEjecucion","algoritmo","tiempo","nodos_expandidos","jugarEstrategia","parametros","modo","agente","nuevoTablero","JSON","parse","stringify","Humano","t0","performance","now","t1","res","Agujero","fichaValor","Columna","handleClick","agujeros","_","reverse","TableroGrafico","grabarResultado","FICHA_ESTRATEGIA","FICHA_HUMANO","setTablero","setTurno","SinSeleccionar","setModo","ganador","setGanador","seleccionarModo","idxColumna","copiaTablero","tirarFicha","hacerMovimiento","estiloGanador","CPU","configuracionParametros","TablaResultados","resultados","Table","striped","bordered","hover","idx","MiniMaxVsAlfaBeta","totalGamesCount","n_minimax","n_alfabeta","inicia","winsMinimax","winsAlfaBeta","draws","FICHA_MINIMAX","FICHAS_ALFABETA","MiniMaxVsRL","trainingCount","totalExperiments","qRates","q","winsRatioAcum","lossesRatioAcum","drawsRatioAcum","tiempoPromAcum","k","ag","selfPlay","wins","losses","Experimento","humanTrainingCount","jugarVsHumano","RLvsRL","algoritmos","App","setParametros","setResultados","Container","prevState","newState","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.11926f96.chunk.js","sourcesContent":["export enum Estrategia {\n    Minimax = 0,\n    Alfabeta,\n    RLAgent\n}","export enum Ficha {\n    Vacio = 0,\n    Rojo = 1,\n    Amarillo = 2,\n}","import {Ficha} from \"./ficha\";\n\nexport enum Resultado {\n    SinGanador = 0,\n    GanadorRojo = 1,\n    GanadorAmarillo = 2,\n    Empate = 3,\n}\n\nexport const ficha2Resultado = (ficha: Ficha): Resultado => {\n    switch (ficha){\n        case Ficha.Rojo:\n            return Resultado.GanadorRojo;\n        case Ficha.Amarillo:\n            return Resultado.GanadorAmarillo;\n        default:\n            return Resultado.SinGanador;\n    }\n}","import {Ficha} from \"./ficha\";\nimport {Resultado} from \"./resultado\";\n\nexport default class Tablero {\n    posiciones: Ficha[][]\n\n    constructor() {\n        // Crear la matrix llena de espacios vacios\n        this.posiciones = Array(6).fill(undefined).map( () => Array(7).fill(Ficha.Vacio));\n    }\n\n    vaciarTablero(): void {\n        // Vacia el tablero\n        this.posiciones = Array(6).fill(undefined).map( () => Array(7).fill(Ficha.Vacio));\n    }\n\n    calcularResultado(): Resultado {\n        let conecta = 0;\n        let anterior;\n\n        // Recorre el tablero horizontalmente\n        for (let i = 0; i < this.posiciones.length; i++) {\n            anterior = 0;\n            for (let j = 0; j < (this.posiciones)[0].length; j++) {\n                let actual = (this.posiciones)[i][j];\n                if (actual === anterior) conecta++;\n                else conecta = 1;\n                if (conecta === 4 && (actual === Ficha.Rojo || actual === Ficha.Amarillo)) {\n                    // Retornamos el Ganador\n                    return actual === Ficha.Rojo ? Resultado.GanadorRojo : Resultado.GanadorAmarillo;\n                }\n                anterior = actual;\n            }\n        }\n\n        // Recorre el tablero verticalmente\n        for (let i = 0; i < this.posiciones[0].length; i++) {\n            anterior = 0;\n            for (let j = 0; j < this.posiciones.length; j++) {\n                let actual = this.posiciones[j][i];\n                if (actual === anterior) conecta++;\n                else conecta = 1;\n                if (conecta === 4 && (actual === Ficha.Rojo || actual === Ficha.Amarillo)) {\n                    // Retornamos el ganador\n                    return actual === Ficha.Rojo ? Resultado.GanadorRojo : Resultado.GanadorAmarillo;\n                }\n                anterior = actual;\n            }\n        }\n\n        // Recorre la diagonal secundaria\n        for (let i = 3; i < this.posiciones.length + this.posiciones[0].length - 4; i++) {\n            anterior = 0;\n            for (let j = Math.max(0, i - this.posiciones.length + 1); j < Math.min(i+1, this.posiciones[0].length); j++) {\n                let actual = this.posiciones[i-j][j];\n                if (actual === anterior) conecta++;\n                else conecta = 1;\n                if (conecta === 4 && (actual === Ficha.Rojo || actual === Ficha.Amarillo)) {\n                    return actual === Ficha.Rojo ? Resultado.GanadorRojo : Resultado.GanadorAmarillo;\n                }\n                anterior = actual;\n            }\n        }\n\n        // Recorre la diagonal primaria\n        for (let i = 3; i < this.posiciones.length + this.posiciones[0].length - 4; i++) {\n            anterior = 0;\n            for (let j = Math.max(0, i - this.posiciones.length + 1); j < Math.min(i+1, this.posiciones[0].length); j++) {\n                let actual = this.posiciones[this.posiciones.length-1-i+j][j];\n                if (actual === anterior) conecta++;\n                else conecta = 1;\n                if (conecta === 4 && (actual === Ficha.Rojo || actual === Ficha.Amarillo)) {\n                    return actual === Ficha.Rojo ? Resultado.GanadorRojo : Resultado.GanadorAmarillo;\n                }\n                anterior = actual;\n            }\n        }\n\n        // Quedan espacios vacios, no hay ganador\n        for (let i = 0; i < this.posiciones[0].length; i++) {\n            if (this.posiciones[0][i] === 0 || this.posiciones[this.posiciones.length-1][i] === 0)\n                return Resultado.SinGanador;\n        }\n\n        // Empate\n        return Resultado.Empate;\n    }\n\n    imprimirTablero() {\n        for (let i = this.posiciones.length-1; i >= 0; i--) {\n            let line = \"|\";\n            for (let j = 0; j < this.posiciones[0].length; j++) {\n                line = line.concat(`${this.posiciones[i][j].valueOf()}`).concat(\"|\");\n            }\n            console.log(line);\n        }\n    }\n\n    tirarFicha(columna: number, jugador: Ficha) {\n        if (columna > this.posiciones[0].length) {\n            console.error(\"No existe la columna\");\n            return;\n        }\n\n        if (!this.verificarColumnaLibre(columna)) {\n            console.error(\"No se puede colocar aca\")\n            return;\n        }\n\n        // Encontrar primera fila donde se pueda tirar la ficha\n        let idxFila = this.posiciones.findIndex( fila => fila[columna] === Ficha.Vacio )\n\n        this.posiciones[idxFila][columna] = jugador; // Asignar\n    }\n\n    verificarColumnaLibre(columna: number): Boolean {\n        if (columna > this.posiciones[0].length) {\n            console.error(\"No existe la columna\");\n            return false;\n        }\n\n        return this.posiciones[this.posiciones.length-1][columna] === Ficha.Vacio;\n    }\n}","import Tablero from \"../modelos/tablero\";\nimport {Resultado} from \"../modelos/resultado\";\nimport {Ficha} from \"../modelos/ficha\";\n\nexport default class MinMax {\n    n: number\n    tablero: Tablero = new Tablero();\n    jugadorAgente = Ficha.Rojo;\n    turnosMaximos = 42;\n    gameResult: Resultado = Resultado.SinGanador;\n    expansiones: number = 0;\n\n    constructor(n: number) {\n        this.n = n;\n    }\n\n    reset() {\n        this.tablero = new Tablero();\n        this.gameResult = Resultado.SinGanador;\n    }\n\n    calcularF(tablero: Tablero, jugador: Ficha): number {\n        let count: number[] = Array(3).fill(0);\n\n        // Recorre el tablero horizontalmente\n        for (let i = 0; i < tablero.posiciones.length; i++) {\n            let libre = false;\n            let conecta = 0;\n            let anterior = -1;\n            for (let j = 0; j < tablero.posiciones[0].length; j++) {\n                let actual = tablero.posiciones[i][j];\n                if (actual === anterior && actual !== Ficha.Vacio) {\n                    conecta++;\n                } else {\n                    if ((libre || actual === Ficha.Vacio) && conecta > 0) {\n                        if (actual === jugador) {\n                            if (conecta > 3) return Number.MAX_SAFE_INTEGER;\n                            count[conecta - 1]++;\n                        } else {\n                            if (conecta > 3) return Number.MIN_SAFE_INTEGER;\n                            count[conecta - 1]--;\n                        }\n                    }\n                    libre = actual === Ficha.Vacio;\n                    conecta = 0;\n                }\n                anterior = actual;\n            }\n        }\n\n        // Recorre el tablero verticalmente\n        for (let i = 0; i < tablero.posiciones[0].length; i++) {\n            let libre = false;\n            let conecta = 0;\n            let anterior = -1;\n            for (let j = 0; j < tablero.posiciones.length; j++) {\n                let actual = tablero.posiciones[j][i];\n                if (actual === anterior && actual !== Ficha.Vacio) {\n                    conecta++;\n                } else {\n                    if ((libre || actual === Ficha.Vacio) && conecta > 0) {\n                        if (actual === jugador) {\n                            if (conecta > 3) return Number.MAX_SAFE_INTEGER;\n                            count[conecta - 1]++;\n                        } else {\n                            if (conecta > 3) return Number.MIN_SAFE_INTEGER;\n                            count[conecta - 1]--;\n                        }\n                    }\n                    libre = (actual === Ficha.Vacio);\n                    conecta = 0;\n                }\n                anterior = actual;\n            }\n        }\n\n        // Recorre la diagonal secundaria\n        for (let i = 3; i < tablero.posiciones.length + tablero.posiciones[0].length - 4; i++) {\n            let libre = false;\n            let conecta = 0;\n            let anterior = -1;\n            for (let j = Math.max(0, i - tablero.posiciones.length + 1); j < Math.min(i + 1, tablero.posiciones[0].length); j++) {\n                let actual = tablero.posiciones[i - j][j];\n                if (actual === anterior && actual !== Ficha.Vacio) {\n                    conecta++;\n                } else {\n                    if ((libre || actual === Ficha.Vacio) && conecta > 0) {\n                        if (actual === jugador) {\n                            if (conecta > 3) return Number.MAX_SAFE_INTEGER;\n                            count[conecta - 1]++;\n                        } else {\n                            if (conecta > 3) return Number.MIN_SAFE_INTEGER;\n                            count[conecta - 1]--;\n                        }\n                    }\n                    libre = (actual === Ficha.Vacio);\n                    conecta = 0;\n                }\n                anterior = actual;\n            }\n        }\n\n        // Recorre la diagonal primaria\n        for (let i = 3; i < tablero.posiciones.length + tablero.posiciones[0].length - 4; i++) {\n            let libre = false;\n            let conecta = 0;\n            let anterior = -1;\n            for (let j = Math.max(0, i - tablero.posiciones.length + 1); j < Math.min(i + 1, tablero.posiciones[0].length); j++) {\n                let actual = tablero.posiciones[tablero.posiciones.length - 1 - i + j][j];\n                if (actual === anterior && actual !== Ficha.Vacio) {\n                    conecta++;\n                } else {\n                    if ((libre || actual === Ficha.Vacio) && conecta > 0) {\n                        if (actual === jugador) {\n                            if (conecta > 3) return Number.MAX_SAFE_INTEGER;\n                            count[conecta - 1]++;\n                        } else {\n                            if (conecta > 3) return Number.MIN_SAFE_INTEGER;\n                            count[conecta - 1]--;\n                        }\n                    }\n                    libre = (actual === Ficha.Vacio);\n                    conecta = 0;\n                }\n                anterior = actual;\n            }\n        }\n\n        // calcula la suma ponderada\n        let pesos = [0.25, 0.5, 1.0];\n        return count.reduce((r, a, i) => r + a * pesos[i], 0);\n    }\n\n    jugarElitista(jugador: Ficha): void {\n        let prob = 0, columna = 0, columnas: number[] = [];\n        let maxProb = Number.MIN_SAFE_INTEGER;\n\n        // Elegir fila disponible con max reward\n        for (let j = 0; j < this.tablero.posiciones[0].length; j++) {\n            if (this.tablero.posiciones[this.tablero.posiciones.length - 1][j] !== Ficha.Vacio) continue;\n            let i = this.tablero.posiciones.length - 1;\n            while (i > 0 && this.tablero.posiciones[i - 1][j] === Ficha.Vacio) i--;\n\n            this.expansiones++;\n            this.tablero.posiciones[i][j] = jugador;\n            prob = this.minValue(this.tablero, jugador, this.n);\n\n            if (prob > maxProb) {\n                maxProb = prob;\n                columnas = [j];\n            } else if (prob === maxProb) {\n                columnas.push(j);\n            }\n            this.tablero.posiciones[i][j] = 0;\n        }\n\n        // Rompe empates entre columnas\n        if (columnas.length === 1) {\n            columna = columnas[0];\n        } else {\n            if (columnas.length === 0) {\n                for (let i = 0; i < this.tablero.posiciones[0].length; i++) {\n                    if (this.tablero.posiciones[this.tablero.posiciones.length-1][i] === 0) {\n                        columnas.push(i);\n                    }\n                }\n            }\n            columna = columnas[Math.floor(Math.random() * columnas.length)];\n        }\n\n        // Aplicar jugada\n        let fila = this.tablero.posiciones.length - 1;\n        while (fila > 0 && this.tablero.posiciones[fila - 1][columna] === Ficha.Vacio) fila--;\n        this.tablero.posiciones[fila][columna] = jugador;\n    }\n\n    maxValue(tablero: Tablero, jugador: Ficha, n: number): number {\n        if (n === 0) return this.calcularF(tablero, jugador);\n        let resultado = tablero.calcularResultado();\n        if (resultado.valueOf() === jugador.valueOf()) return Number.MAX_SAFE_INTEGER;\n        else if (resultado.valueOf() === (jugador % 2) + 1) return Number.MIN_SAFE_INTEGER;\n\n        let prob;\n        let maxProb = Number.MIN_SAFE_INTEGER;\n\n        // elegir fila disponible con max reward\n        for (let j = 0; j < this.tablero.posiciones[0].length; j++) {\n            if (this.tablero.posiciones[this.tablero.posiciones.length - 1][j] !== Ficha.Vacio) continue;\n            let i = this.tablero.posiciones.length - 1;\n            while (i > 0 && this.tablero.posiciones[i - 1][j] === Ficha.Vacio) i--;\n\n            if (n > 1) this.expansiones++; // Los nodos objetivos no se expanden\n            this.tablero.posiciones[i][j] = jugador;\n            prob = this.minValue(this.tablero, jugador, n - 1);\n            if (prob > maxProb) {\n                maxProb = prob;\n                //columna = j;\n            }\n            this.tablero.posiciones[i][j] = Ficha.Vacio;\n        }\n\n        return maxProb;\n    }\n\n    minValue(tablero: Tablero, jugador: Ficha, n: number): number {\n        if (n === 0) return this.calcularF(tablero, jugador);\n        let resultado = tablero.calcularResultado();\n        if (resultado.valueOf() === jugador.valueOf()) return Number.MAX_SAFE_INTEGER;\n        else if (resultado === (jugador % 2) + 1) return Number.MIN_SAFE_INTEGER;\n\n        let prob = 0;\n        let minProb = Number.MAX_SAFE_INTEGER;\n\n        // elegir fila disponible con min reward\n        for (let j = 0; j < this.tablero.posiciones[0].length; j++) {\n            if (this.tablero.posiciones[this.tablero.posiciones.length - 1][j] !== Ficha.Vacio) continue;\n            let i = this.tablero.posiciones.length - 1;\n            while (i > 0 && this.tablero.posiciones[i - 1][j] === Ficha.Vacio) i--;\n\n            if (n > 1) this.expansiones++; // Los nodos objetivos no se expanden\n            this.tablero.posiciones[i][j] = (jugador % 2) + 1;\n            prob = this.maxValue(this.tablero, jugador, n - 1);\n            if (prob < minProb) {\n                minProb = prob;\n                //columna = j;\n            }\n            this.tablero.posiciones[i][j] = Ficha.Vacio;\n        }\n\n        return minProb;\n    }\n\n    jugarHumano(jugador: Ficha): void {\n        // lee una casilla disponible\n        this.tablero.imprimirTablero();\n        let columnas = [];\n        for (let i = 0; i < this.tablero.posiciones[0].length; i++) {\n            if (this.tablero.posiciones[this.tablero.posiciones.length-1][i] === Ficha.Vacio) {\n                columnas.push(i);\n            }\n        }\n        let columna;\n        do {\n            const prompt = require('prompt-sync')();\n            console.log(columnas);\n            columna = parseInt(prompt('Cual es su jugada? '));\n        } while (!(columna in columnas));\n\n        // aplicar jugada\n        let fila = this.tablero.posiciones.length - 1;\n        while (fila > 0 && this.tablero.posiciones[fila-1][columna] === Ficha.Vacio) fila--;\n        this.tablero.posiciones[fila][columna] = jugador;\n    }\n\n    jugarVsHumano(): void {\n        let jugador = this.jugadorAgente;\n        let contrario = (jugador % 2) + 1;\n        let turno = 1;\n        let jugadas = this.turnosMaximos;\n\n        do {\n            if (turno === jugador) {\n                this.jugarElitista(jugador);\n            } else {\n                this.jugarHumano(contrario);\n            }\n\n            //actualizar resultado\n            this.gameResult = this.tablero.calcularResultado();\n            if (this.gameResult > 0) { //ya hay resultado\n                if (this.gameResult.valueOf() !== jugador.valueOf()) //perdimos, actualizar tablero\n                {\n                    console.log(\"Felicidades! Usted ha ganado.\");\n                } else if (this.gameResult.valueOf() === jugador.valueOf()) {\n                    this.tablero.imprimirTablero();\n                    console.log(\"Felicidades! Su agente ha ganado.\");\n                }\n                break;\n            }\n\n            turno = 2 - turno + 1;\n            jugadas--;\n        } while (jugadas > 0);\n    }\n}","import Tablero from \"../modelos/tablero\";\nimport {Ficha} from \"../modelos/ficha\";\nimport {Resultado} from \"../modelos/resultado\";\n\nexport default class AlfaBeta {\n    n: number\n    tablero: Tablero = new Tablero();\n    jugadorAgente = Ficha.Rojo;\n    turnosMaximos = 42;\n    gameResult: Resultado = Resultado.SinGanador;\n    expansiones: number = 0;\n\n    constructor(n: number) {\n        this.n = n;\n    }\n\n    reset() {\n        this.tablero = new Tablero();\n        this.gameResult = Resultado.SinGanador;\n    }\n\n    calcularF(tablero: Tablero, jugador: Ficha): number {\n        let count: number[] = Array(3).fill(0);\n\n        // Recorre el tablero horizontalmente\n        for (let i = 0; i < tablero.posiciones.length; i++) {\n            let libre = false;\n            let conecta = 0;\n            let anterior = -1;\n            for (let j = 0; j < tablero.posiciones[0].length; j++) {\n                let actual = tablero.posiciones[i][j];\n                if (actual === anterior && actual !== Ficha.Vacio) {\n                    conecta++;\n                } else {\n                    if ((libre || actual === Ficha.Vacio) && conecta > 0) {\n                        if (actual === jugador) {\n                            if (conecta > 3) return Number.MAX_SAFE_INTEGER;\n                            count[conecta - 1]++;\n                        } else {\n                            if (conecta > 3) return Number.MIN_SAFE_INTEGER;\n                            count[conecta - 1]--;\n                        }\n                    }\n                    libre = actual === Ficha.Vacio;\n                    conecta = 0;\n                }\n                anterior = actual;\n            }\n        }\n\n        // Recorre el tablero verticalmente\n        for (let i = 0; i < tablero.posiciones[0].length; i++) {\n            let libre = false;\n            let conecta = 0;\n            let anterior = -1;\n            for (let j = 0; j < tablero.posiciones.length; j++) {\n                let actual = tablero.posiciones[j][i];\n                if (actual === anterior && actual !== Ficha.Vacio) {\n                    conecta++;\n                } else {\n                    if ((libre || actual === Ficha.Vacio) && conecta > 0) {\n                        if (actual === jugador) {\n                            if (conecta > 3) return Number.MAX_SAFE_INTEGER;\n                            count[conecta - 1]++;\n                        } else {\n                            if (conecta > 3) return Number.MIN_SAFE_INTEGER;\n                            count[conecta - 1]--;\n                        }\n                    }\n                    libre = (actual === Ficha.Vacio);\n                    conecta = 0;\n                }\n                anterior = actual;\n            }\n        }\n\n        // Recorre la diagonal secundaria\n        for (let i = 3; i < tablero.posiciones.length + tablero.posiciones[0].length - 4; i++) {\n            let libre = false;\n            let conecta = 0;\n            let anterior = -1;\n            for (let j = Math.max(0, i - tablero.posiciones.length + 1); j < Math.min(i + 1, tablero.posiciones[0].length); j++) {\n                let actual = tablero.posiciones[i - j][j];\n                if (actual === anterior && actual !== Ficha.Vacio) {\n                    conecta++;\n                } else {\n                    if ((libre || actual === Ficha.Vacio) && conecta > 0) {\n                        if (actual === jugador) {\n                            if (conecta > 3) return Number.MAX_SAFE_INTEGER;\n                            count[conecta - 1]++;\n                        } else {\n                            if (conecta > 3) return Number.MIN_SAFE_INTEGER;\n                            count[conecta - 1]--;\n                        }\n                    }\n                    libre = (actual === Ficha.Vacio);\n                    conecta = 0;\n                }\n                anterior = actual;\n            }\n        }\n\n        // Recorre la diagonal primaria\n        for (let i = 3; i < tablero.posiciones.length + tablero.posiciones[0].length - 4; i++) {\n            let libre = false;\n            let conecta = 0;\n            let anterior = -1;\n            for (let j = Math.max(0, i - tablero.posiciones.length + 1); j < Math.min(i + 1, tablero.posiciones[0].length); j++) {\n                let actual = tablero.posiciones[tablero.posiciones.length - 1 - i + j][j];\n                if (actual === anterior && actual !== Ficha.Vacio) {\n                    conecta++;\n                } else {\n                    if ((libre || actual === Ficha.Vacio) && conecta > 0) {\n                        if (actual === jugador) {\n                            if (conecta > 3) return Number.MAX_SAFE_INTEGER;\n                            count[conecta - 1]++;\n                        } else {\n                            if (conecta > 3) return Number.MIN_SAFE_INTEGER;\n                            count[conecta - 1]--;\n                        }\n                    }\n                    libre = (actual === Ficha.Vacio);\n                    conecta = 0;\n                }\n                anterior = actual;\n            }\n        }\n\n        // calcula la suma ponderada\n        let pesos = [0.25, 0.5, 1.0];\n        return count.reduce((r, a, i) => r + a * pesos[i], 0);\n    }\n\n    jugarElitista(jugador: Ficha): void {\n        let prob = 0, columna = 0, columnas: number[] = [];\n        let maxProb = Number.MIN_SAFE_INTEGER;\n\n        // Elegir fila disponible con max reward\n        for (let j = 0; j < this.tablero.posiciones[0].length; j++) {\n            if (this.tablero.posiciones[this.tablero.posiciones.length - 1][j] !== Ficha.Vacio) continue;\n            let i = this.tablero.posiciones.length - 1;\n            while (i > 0 && this.tablero.posiciones[i - 1][j] === Ficha.Vacio) i--;\n\n            this.expansiones++;\n            this.tablero.posiciones[i][j] = jugador;\n            prob = this.minValue(this.tablero, jugador, this.n, Number.MIN_SAFE_INTEGER, Number.MAX_SAFE_INTEGER);\n\n            if (prob > maxProb) {\n                maxProb = prob;\n                columnas = [j];\n            } else if (prob === maxProb) {\n                columnas.push(j);\n            }\n            this.tablero.posiciones[i][j] = 0;\n        }\n\n        // Rompe empates entre columnas\n        if (columnas.length === 1) {\n            columna = columnas[0];\n        } else {\n            if (columnas.length === 0) {\n                for (let i = 0; i < this.tablero.posiciones[0].length; i++) {\n                    if (this.tablero.posiciones[this.tablero.posiciones.length-1][i] === 0) {\n                        columnas.push(i);\n                    }\n                }\n            }\n            columna = columnas[Math.floor(Math.random() * columnas.length)];\n        }\n\n        // Aplicar jugada\n        let fila = this.tablero.posiciones.length - 1;\n        while (fila > 0 && this.tablero.posiciones[fila - 1][columna] === Ficha.Vacio) fila--;\n        this.tablero.posiciones[fila][columna] = jugador;\n    }\n\n    maxValue(tablero: Tablero, jugador: Ficha, n: number, alfa: number, beta: number): number {\n        if (n === 0) return this.calcularF(tablero, jugador);\n        let resultado = tablero.calcularResultado();\n        if (resultado.valueOf() === jugador.valueOf()) return Number.MAX_SAFE_INTEGER;\n        else if (resultado.valueOf() === (jugador % 2) + 1) return Number.MIN_SAFE_INTEGER;\n\n        let prob;\n        let maxProb = Number.MIN_SAFE_INTEGER;\n\n        // elegir fila disponible con max reward\n        for (let j = 0; j < this.tablero.posiciones[0].length; j++) {\n            if (this.tablero.posiciones[this.tablero.posiciones.length - 1][j] !== Ficha.Vacio) continue;\n            let i = this.tablero.posiciones.length - 1;\n            while (i > 0 && this.tablero.posiciones[i - 1][j] === Ficha.Vacio) i--;\n\n            if (n > 1) this.expansiones++; // Los nodos objetivos no se expanden\n            this.tablero.posiciones[i][j] = jugador;\n            prob = this.minValue(this.tablero, jugador, n - 1, alfa, beta);\n            if (prob > maxProb) {\n                maxProb = prob;\n                //columna = j;\n            }\n            this.tablero.posiciones[i][j] = Ficha.Vacio;\n\n            // Podar\n            if (maxProb >= beta) return maxProb;\n            if (maxProb > alfa) alfa = maxProb;\n        }\n\n        return maxProb;\n    }\n\n    minValue(tablero: Tablero, jugador: Ficha, n: number, alfa: number, beta: number): number {\n        if (n === 0) return this.calcularF(tablero, jugador);\n        let resultado = tablero.calcularResultado();\n        if (resultado.valueOf() === jugador.valueOf()) return Number.MAX_SAFE_INTEGER;\n        else if (resultado === (jugador % 2) + 1) return Number.MIN_SAFE_INTEGER;\n\n        let prob = 0;\n        let minProb = Number.MAX_SAFE_INTEGER;\n\n        // elegir fila disponible con min reward\n        for (let j = 0; j < this.tablero.posiciones[0].length; j++) {\n            if (this.tablero.posiciones[this.tablero.posiciones.length - 1][j] !== Ficha.Vacio) continue;\n            let i = this.tablero.posiciones.length - 1;\n            while (i > 0 && this.tablero.posiciones[i - 1][j] === Ficha.Vacio) i--;\n\n            if (n > 1) this.expansiones++; // Los nodos objetivos no se expanden\n            this.tablero.posiciones[i][j] = (jugador % 2) + 1;\n            prob = this.maxValue(this.tablero, jugador, n - 1, alfa, beta);\n            if (prob < minProb) {\n                minProb = prob;\n                //columna = j;\n            }\n            this.tablero.posiciones[i][j] = Ficha.Vacio;\n\n            if (minProb <= alfa) return minProb;\n            if (minProb < beta) beta = minProb;\n        }\n\n        return minProb;\n    }\n\n    jugarHumano(jugador: Ficha): void {\n        // lee una casilla disponible\n        this.tablero.imprimirTablero();\n        let columnas = [];\n        for (let i = 0; i < this.tablero.posiciones[0].length; i++) {\n            if (this.tablero.posiciones[this.tablero.posiciones.length-1][i] === Ficha.Vacio) {\n                columnas.push(i);\n            }\n        }\n        let columna;\n        do {\n            const prompt = require('prompt-sync')();\n            console.log(columnas);\n            columna = parseInt(prompt('Cual es su jugada? '));\n        } while (!(columna in columnas));\n\n        // aplicar jugada\n        let fila = this.tablero.posiciones.length - 1;\n        while (fila > 0 && this.tablero.posiciones[fila-1][columna] === Ficha.Vacio) fila--;\n        this.tablero.posiciones[fila][columna] = jugador;\n    }\n\n    jugarVsHumano(): void {\n        let jugador = this.jugadorAgente;\n        let contrario = (jugador % 2) + 1;\n        let turno = 1;\n        let jugadas = this.turnosMaximos;\n\n        do {\n            if (turno === jugador) {\n                this.jugarElitista(jugador);\n            } else {\n                this.jugarHumano(contrario);\n            }\n\n            //actualizar resultado\n            this.gameResult = this.tablero.calcularResultado();\n            if (this.gameResult > 0) { //ya hay resultado\n                if (this.gameResult.valueOf() !== jugador.valueOf()) //perdimos, actualizar tablero\n                {\n                    console.log(\"Felicidades! Usted ha ganado.\");\n                } else if (this.gameResult.valueOf() === jugador.valueOf()) {\n                    this.tablero.imprimirTablero();\n                    console.log(\"Felicidades! Su agente ha ganado.\");\n                }\n                break;\n            }\n\n            turno = 2 - turno + 1;\n            jugadas--;\n        } while (jugadas > 0);\n    }\n}","import {Ficha} from \"../modelos/ficha\";\nimport Tablero from \"../modelos/tablero\";\nimport {ficha2Resultado, Resultado} from \"../modelos/resultado\";\nimport {Estrategia} from \"../modelos/estrategia\";\nimport MinMax from \"../algoritmos/MinMax\";\nimport AlfaBeta from \"../algoritmos/AlfaBeta\";\n\nexport default class RLAgent {\n    // Agente\n    static Agente: RLAgent = new RLAgent(10000)\n    static AgenteB: RLAgent = new RLAgent(10000)\n    // Variables\n    n: number;\n    tablero: Tablero = new Tablero();\n    lastTablero: Tablero = new Tablero();\n    entrenar: boolean = false;\n    jugadorAgente: Ficha = Ficha.Rojo;\n    alpha: number = 0.7;\n    turnosMaximos: number = 42;\n    gameResult: Resultado = Resultado.SinGanador;\n    lookupTable: Map<string, number> = new Map<string, number>();\n    qRate: number = 0.5;\n    expansiones: number = 0;\n\n    constructor(n: number) {\n        this.n = n;\n    }\n\n    reset(entrenar: boolean) {\n        this.tablero = new Tablero();\n        this.lastTablero = new Tablero();\n        this.entrenar = entrenar;\n        this.gameResult = Resultado.SinGanador;\n        this.expansiones = 0;\n    }\n\n    resetLearning() {\n        this.lookupTable = new Map<string, number>();\n    }\n\n    calcularR(tablero: Tablero, jugador: Ficha) {\n        let contrario = jugador === Ficha.Rojo ? Ficha.Amarillo : Ficha.Rojo;\n\n        let result = tablero.calcularResultado();\n\n        switch (result) {\n            case ficha2Resultado(jugador):\n                // Gana el jugador\n                return 1.0;\n            case ficha2Resultado(contrario):\n                // Gana el contrario\n                return 0.0;\n            case Resultado.Empate:\n                // Sale empate\n                return 0.0;\n            default:\n                // No hay ganador\n                return this.getProbability(tablero);\n        }\n    }\n\n    getProbability(tablero: Tablero): number {\n        this.expansiones++;\n        let tableroSerializado = tablero.posiciones.toString();\n\n        if (!this.lookupTable.has(tableroSerializado)) {\n            this.lookupTable.set(tableroSerializado, 0.5);\n        }\n\n        return this.lookupTable.get(tableroSerializado)!;\n    }\n\n    updateProbability(tablero: Tablero, nextStateProb: number, jugador: Ficha) {\n        let prob = this.calcularR(tablero, jugador);\n        prob = prob + this.alpha * (nextStateProb - prob);\n\n        let tableroSerializado = tablero.toString();\n        this.lookupTable.set(tableroSerializado, prob);\n    }\n\n    jugarElitista(jugador: Ficha) {\n        let prob, columna, columnas: number[] = [];\n        let maxProb = Number.MIN_SAFE_INTEGER;\n\n        // elegir fila disponible con max reward\n        for (let j = 0; j < this.tablero.posiciones[0].length; j++) {\n            if (this.tablero.posiciones[this.tablero.posiciones.length-1][j] !== Ficha.Vacio) continue;\n            let i = this.tablero.posiciones.length-1;\n            while (i > 0 && this.tablero.posiciones[i-1][j] === Ficha.Vacio) i--;\n\n            this.tablero.posiciones[i][j] = jugador;\n            prob = this.calcularR(this.tablero, jugador);\n            if (prob > maxProb) {\n                maxProb = prob;\n                columnas = [j];\n            } else if (prob === maxProb) {\n                columnas.push(j);\n            }\n            this.tablero.posiciones[i][j] = 0;\n        }\n\n        // rompe empates entre columnas\n        if (columnas.length === 1) {\n            columna = columnas[0];\n        } else {\n            if (columnas.length === 0) {\n                for (let i = 0; i < this.tablero.posiciones[0].length; i++) {\n                    if (this.tablero.posiciones[this.tablero.posiciones.length-1][i] === 0) {\n                        columnas.push(i);\n                    }\n                }\n            }\n            columna = columnas[Math.floor(Math.random() * columnas.length)];\n        }\n\n        // entrenar\n        if (this.entrenar) {\n            this.updateProbability(this.lastTablero, maxProb, jugador);\n        }\n\n        // aplicar jugada\n        let fila = this.tablero.posiciones.length - 1;\n        while (fila > 0 && this.tablero.posiciones[fila-1][columna] === Ficha.Vacio) fila--;\n        this.tablero.posiciones[fila][columna] = jugador;\n\n        // actualizar ultimo tablero\n        this.copiarTablero(this.tablero, this.lastTablero);\n    }\n\n    jugarRandom(jugador: Ficha) { // Diversificación\n        // Elegir casillas disponibles al azar\n        let columnas = [];\n        for (let i = 0; i < this.tablero.posiciones[0].length; i++) {\n            if (this.tablero.posiciones[this.tablero.posiciones.length-1][i] === Ficha.Vacio) {\n                columnas.push(i);\n            }\n        }\n        let columna = columnas[Math.floor(Math.random() * columnas.length)];\n\n        // aplicar jugada\n        let fila = this.tablero.posiciones.length - 1;\n        while (fila > 0 && this.tablero.posiciones[fila-1][columna] === Ficha.Vacio) fila--;\n        this.tablero.posiciones[fila][columna] = jugador;\n\n        //si es el agente, actualizar ultimo tablero\n        if (jugador === this.jugadorAgente) {\n            this.copiarTablero(this.tablero, this.lastTablero);\n        }\n    }\n\n    jugarHumano(jugador: Ficha) {\n        // lee una casilla disponible\n        this.tablero.imprimirTablero()\n        let columnas = [];\n        for (let i = 0; i < this.tablero.posiciones[0].length; i++) {\n            if (this.tablero.posiciones[this.tablero.posiciones.length-1][i] === Ficha.Vacio) {\n                columnas.push(i);\n            }\n        }\n        let columna;\n        do {\n            const prompt = require('prompt-sync')();\n            console.log(columnas);\n            columna = parseInt(prompt('Cual es su jugada? '));\n            console.log(columna);\n        } while (!(columna in columnas));\n\n        // aplicar jugada\n        let fila = this.tablero.posiciones.length - 1;\n        while (fila > 0 && this.tablero.posiciones[fila-1][columna] === Ficha.Vacio) fila--;\n        this.tablero.posiciones[fila][columna] = jugador;\n\n        // si es el agente, actualizar ultimo tablero\n        if (jugador === this.jugadorAgente) {\n            this.copiarTablero(this.tablero, this.lastTablero);\n        }\n    }\n\n    copiarTablero(tableroOrigen: Tablero, tableroDestino: Tablero) {\n        for (let i = 0; i < tableroOrigen.posiciones.length; i++) {\n            for (let j = 0; j < tableroOrigen.posiciones[0].length; j++) {\n\n                tableroDestino.posiciones[i][j] = tableroOrigen.posiciones[i][j];\n            }\n        }\n    }\n\n    updateAlpha(currentGame: number) {\n\n        this.alpha = 0.5 - 0.49 * currentGame / this.n;\n    }\n\n    selfPlay() {\n        let turno = 1;\n        let jugadas = this.turnosMaximos;\n        let q;\n        do {\n            q = Math.random();\n            if (q <= this.qRate || !this.entrenar) { // en train, juega basado en qrate\n                this.jugarElitista(turno);         // en validation, juega siempre elitista\n            } else {\n                this.jugarRandom(turno);\n            }\n\n            // actualizar resultado\n            this.gameResult = this.tablero.calcularResultado();\n            if (this.gameResult > 0) { // ya hay resultado\n                if (this.gameResult !== ficha2Resultado(turno) && this.entrenar) { // perdimos, actualizar tablero\n                    this.updateProbability(this.lastTablero, this.calcularR(this.tablero, turno), turno);\n                }\n                break;\n            }\n\n            turno = 2 - turno + 1;\n            jugadas--;\n        } while (jugadas > 0);\n    }\n\n    jugarVsRandom() {\n\n        let jugador = this.jugadorAgente;\n        let contrario = (jugador % 2) + 1;\n        let turno = 1;\n        let jugadas = this.turnosMaximos;\n        let q;\n        do {\n            if (turno === jugador) {\n                q = Math.random();\n                if (q <= this.qRate || !this.entrenar) { // en train, juega basado en qrate\n                    this.jugarElitista(jugador);         // en validation, juega siempre elitista\n                } else {\n                    this.jugarRandom(jugador);\n                }\n            } else {\n                this.jugarRandom(contrario);\n            }\n\n            // actualizar resultado\n            this.gameResult = this.tablero.calcularResultado();\n            if (this.gameResult > 0) { // ya hay resultado\n                if (this.gameResult !== ficha2Resultado(jugador) && this.entrenar) { // perdimos, actualizar tablero\n                    this.updateProbability(this.lastTablero, this.calcularR(this.tablero, jugador), jugador);\n                }\n                break;\n            }\n\n            turno = 2 - turno + 1;\n            jugadas--;\n        } while (jugadas > 0);\n\n    }\n\t\n\tjugarVsMinimax(nivel: number, estrategia: Estrategia) {\n\t\tlet minimax;\n\t\t\n\t\tswitch (estrategia) {\n\t\t\tcase Estrategia.Minimax:\n\t\t\t\tminimax = new MinMax(nivel);\n\t\t\t\tbreak\n\t\t\tcase Estrategia.Alfabeta:\n\t\t\t\tminimax = new AlfaBeta(nivel);\n\t\t\t\tbreak\n\t\t\tdefault:\n\t\t\t\tminimax = new MinMax(nivel);\n\t\t\t\tbreak\n\t\t}\n\t\t\n        let jugador = this.jugadorAgente;\n\t\tlet contrario = (minimax.jugadorAgente % 2) + 1;\n        let turno = 1;\n        let jugadas = this.turnosMaximos;\n        let q;\n        do {\n            if (turno === jugador) {\n                q = Math.random();\n                if (q <= this.qRate || !this.entrenar) { // en train, juega basado en qrate\n                    this.jugarElitista(jugador);         // en validation, juega siempre elitista\n                } else {\n                    this.jugarRandom(jugador);\n                }\n            } else {\n\t\t\t\tthis.copiarTablero(this.tablero, minimax.tablero);\n\t\t\t\tminimax.jugarElitista(contrario);\n\t\t\t\tthis.copiarTablero(minimax.tablero, this.tablero);\n            }\n\n            // actualizar resultado\n            this.gameResult = this.tablero.calcularResultado();\n            if (this.gameResult > 0) { // ya hay resultado\n                if (this.gameResult !== ficha2Resultado(jugador) && this.entrenar) { // perdimos, actualizar tablero\n                    this.updateProbability(this.lastTablero, this.calcularR(this.tablero, jugador), jugador);\n                }\n                break;\n            }\n\n            turno = 2 - turno + 1;\n            jugadas--;\n        } while (jugadas > 0);\n\n    }\n\n    jugarVsHumano() {\n\n        let jugador = this.jugadorAgente;\n        let contrario = (jugador % 2) + 1;\n        let turno = 1;\n        let jugadas = this.turnosMaximos;\n        do {\n            if (turno === jugador) {\n                this.jugarRandom(jugador);\n            } else {\n                this.jugarHumano(contrario);\n            }\n\n            //actualizar resultado\n            this.gameResult = this.tablero.calcularResultado();\n            if (this.gameResult > 0) { //ya hay resultado\n                if (this.gameResult !== ficha2Resultado(jugador) && this.entrenar) //perdimos, actualizar tablero\n                {\n                    this.updateProbability(this.lastTablero, this.calcularR(this.tablero, jugador), jugador);\n                    console.log(\"Felicidades! Usted ha ganado.\");\n                } else if (this.gameResult === ficha2Resultado(jugador)) {\n                    this.tablero.imprimirTablero();\n                    console.log(\"Felicidades! Su agente ha ganado.\");\n                }\n                break;\n            }\n\n            turno = 2 - turno + 1;\n            jugadas--;\n        } while (jugadas > 0);\n    }\n}","export enum Modo {\n    SinSeleccionar,\n    Humano,\n    Estrategia,\n\tCPU,\n}","import React, {useEffect, useState} from \"react\";\nimport configuracionParametros from \"../modelos/configuracionParametros\";\nimport {Button, Col, Form, Row} from \"react-bootstrap\";\nimport {Estrategia} from \"../modelos/estrategia\";\nimport RLAgent from \"../algoritmos/RLAgent\";\n\ntype ParametrosProps = {\n    onElegirEstrategia: (parametros: configuracionParametros) => void,\n    onLimpiarTablero: () => void\n}\n\nexport const Parametros = ({onElegirEstrategia, onLimpiarTablero}: ParametrosProps) => {\n    // Variables\n    const [estrategiaA, setEstrategiaA] = useState(Estrategia.Minimax);\n    const [nivelA, setNivelA] = useState(3);\n    const [qRateA, setRateA] = useState(0.5);\n    const [trainNA, setTrainNA] = useState(10000);\n\tconst [estrategiaB, setEstrategiaB] = useState(Estrategia.Minimax);\n    const [nivelB, setNivelB] = useState(3);\n    const [qRateB, setRateB] = useState(0.5);\n    const [trainNB, setTrainNB] = useState(10000);\n\n    // Handlers\n    const elegirEstrategia = () => {\n        // Iniciar el juego\n        onElegirEstrategia({\n            estrategiaA: estrategiaA,\n            nivelA: nivelA,\n            qRateA: qRateA,\n\t\t\testrategiaB: estrategiaB,\n            nivelB: nivelB,\n            qRateB: qRateB,\n        });\n    }\n\n    const clickEntrenarAgenteA = () => {\n        // Entrenar al agente\n        RLAgent.Agente = new RLAgent(trainNA);\n        RLAgent.Agente.qRate = qRateA;\n\n        for (let i=0; i < trainNA; i++) {\n            RLAgent.Agente.reset(true);\n            RLAgent.Agente.updateAlpha(i);\n            RLAgent.Agente.jugarVsRandom();\n        }\n    }\n\t\n\tconst clickEntrenarAgentevsEstrategiaA = () => {\n        // Entrenar al agente\n        RLAgent.Agente = new RLAgent(trainNA);\n        RLAgent.Agente.qRate = qRateA;\n\n        for (let i=0; i < trainNA; i++) {\n            RLAgent.Agente.reset(true);\n            RLAgent.Agente.updateAlpha(i);\n            RLAgent.Agente.jugarVsMinimax(estrategiaB, nivelB);\n        }\n    }\n\t\n\tconst clickEntrenarAgenteB = () => {\n        // Entrenar al agente\n        RLAgent.AgenteB = new RLAgent(trainNB);\n        RLAgent.AgenteB.qRate = qRateB;\n\n        for (let i=0; i < trainNB; i++) {\n            RLAgent.AgenteB.reset(true);\n            RLAgent.AgenteB.updateAlpha(i);\n            RLAgent.AgenteB.jugarVsRandom();\n        }\n    }\n\t\n\tconst clickEntrenarAgentevsEstrategiaB = () => {\n        // Entrenar al agente\n        RLAgent.AgenteB = new RLAgent(trainNB);\n        RLAgent.AgenteB.qRate = qRateB;\n\n        for (let i=0; i < trainNB; i++) {\n            RLAgent.AgenteB.reset(true);\n            RLAgent.AgenteB.updateAlpha(i);\n            RLAgent.AgenteB.jugarVsMinimax(estrategiaA, nivelA);\n        }\n    }\n\n    // eslint-disable-next-line\n    useEffect( elegirEstrategia, [estrategiaA, estrategiaB, nivelA, nivelB, qRateA, qRateB]);\n\n    // Render\n    return (\n\t\t<>\n\t\t<h1>Jugador amarillo</h1>\n        <Form>\n            <Row>\n                <Col>\n                    <Row>\n                        <Form.Group className=\"mb-3\">\n                            <Form.Label>Estrategia</Form.Label>\n                            <Form.Select\n                                value={estrategiaA}\n                                onChange={ (event) => setEstrategiaA(parseInt(event.currentTarget.value)) }>\n                                <option value={Estrategia.Minimax}>Minimax</option>\n                                <option value={Estrategia.Alfabeta}>Poda Alfa-beta</option>\n                                <option value={Estrategia.RLAgent}>Agente RL</option>\n                            </Form.Select>\n                        </Form.Group>\n                    </Row>\n                    <Row>\n                        <Form.Group className=\"mb-3\">\n                            <Form.Label>N Entrenamiento (Solo para RL)</Form.Label>\n                            <Form.Control value={trainNA}\n                                          type=\"number\"\n                                          disabled={estrategiaA !== Estrategia.RLAgent}\n                                          onChange={ event => setTrainNA(parseInt(event.currentTarget.value))}/>\n                        </Form.Group>\n                    </Row>\n                </Col>\n                <Col>\n                    <Row>\n                        <Form.Group className=\"mb-3\">\n                            <Form.Label>Nivel de búsqueda</Form.Label>\n                            <Form.Control value={nivelA}\n                                          type=\"number\"\n                                          onChange={ event => setNivelA(parseInt(event.currentTarget.value))}/>\n                        </Form.Group>\n                    </Row>\n                    <Row>\n                        <Form.Group className=\"mb-3\">\n                            <Form.Label>Q Rate (Solo para RL)</Form.Label>\n                            <Form.Control value={qRateA}\n                                          type=\"number\"\n                                          max={1.0}\n                                          disabled={estrategiaA !== Estrategia.RLAgent}\n                                          onChange={ event => setRateA(parseFloat(event.currentTarget.value))}/>\n                        </Form.Group>\n                    </Row>\n                </Col>\n            </Row>\n            <Row>\n                <Col>\n                    <Button variant=\"secondary\"\n                            onClick={clickEntrenarAgenteA}\n                            disabled={estrategiaA !== Estrategia.RLAgent}\n                            className=\"ms-3\">Entrenar RL</Button>\n\t\t\t\t\t<Button variant=\"secondary\"\n                            onClick={clickEntrenarAgentevsEstrategiaA}\n                            disabled={estrategiaA !== Estrategia.RLAgent || (estrategiaA === Estrategia.RLAgent && estrategiaB === Estrategia.RLAgent)}\n                            className=\"ms-3\">Entrenar RL con Minimax</Button>\n                </Col>\n            </Row>\n        </Form>\n\t\t<h1>Jugador rojo</h1>\n\t\t<Form>\n            <Row>\n                <Col>\n                    <Row>\n                        <Form.Group className=\"mb-3\">\n                            <Form.Label>Estrategia</Form.Label>\n                            <Form.Select\n                                value={estrategiaB}\n                                onChange={ (event) => setEstrategiaB(parseInt(event.currentTarget.value)) }>\n                                <option value={Estrategia.Minimax}>Minimax</option>\n                                <option value={Estrategia.Alfabeta}>Poda Alfa-beta</option>\n                                <option value={Estrategia.RLAgent}>Agente RL</option>\n                            </Form.Select>\n                        </Form.Group>\n                    </Row>\n                    <Row>\n                        <Form.Group className=\"mb-3\">\n                            <Form.Label>N Entrenamiento (Solo para RL)</Form.Label>\n                            <Form.Control value={trainNB}\n                                          type=\"number\"\n                                          disabled={estrategiaB !== Estrategia.RLAgent}\n                                          onChange={ event => setTrainNB(parseInt(event.currentTarget.value))}/>\n                        </Form.Group>\n                    </Row>\n                </Col>\n                <Col>\n                    <Row>\n                        <Form.Group className=\"mb-3\">\n                            <Form.Label>Nivel de búsqueda</Form.Label>\n                            <Form.Control value={nivelB}\n                                          type=\"number\"\n                                          onChange={ event => setNivelB(parseInt(event.currentTarget.value))}/>\n                        </Form.Group>\n                    </Row>\n                    <Row>\n                        <Form.Group className=\"mb-3\">\n                            <Form.Label>Q Rate (Solo para RL)</Form.Label>\n                            <Form.Control value={qRateB}\n                                          type=\"number\"\n                                          max={1.0}\n                                          disabled={estrategiaB !== Estrategia.RLAgent}\n                                          onChange={ event => setRateB(parseFloat(event.currentTarget.value))}/>\n                        </Form.Group>\n                    </Row>\n                </Col>\n            </Row>\n            <Row>\n                <Col>\n                    <Button variant=\"secondary\"\n                            onClick={clickEntrenarAgenteB}\n                            disabled={estrategiaB !== Estrategia.RLAgent}\n                            className=\"ms-3\">Entrenar RL</Button>\n\t\t\t\t\t<Button variant=\"secondary\"\n                            onClick={clickEntrenarAgentevsEstrategiaB}\n                            disabled={estrategiaB !== Estrategia.RLAgent || (estrategiaA === Estrategia.RLAgent && estrategiaB === Estrategia.RLAgent)}\n                            className=\"ms-3\">Entrenar RL con Minimax</Button>\n                </Col>\n            </Row>\n        </Form>\n\t\t</>\n    )\n}","import {Estrategia} from \"./estrategia\";\n\nexport class ResultadoEjecucion {\n    n: number;\n    algoritmo: Estrategia;\n    tiempo: number;\n    nodos_expandidos: number;\n\n\n    constructor(n: number, algoritmo: Estrategia, tiempo: number, nodos_expandidos: number) {\n        this.n = n;\n        this.algoritmo = algoritmo;\n        this.tiempo = tiempo;\n        this.nodos_expandidos = nodos_expandidos;\n    }\n}","import Tablero from \"../modelos/tablero\";\nimport {Estrategia} from \"../modelos/estrategia\";\nimport {Ficha} from \"../modelos/ficha\";\nimport {Modo} from \"../modelos/modo\";\nimport configuracionParametros from \"../modelos/configuracionParametros\";\nimport MinMax from \"./MinMax\";\nimport AlfaBeta from \"./AlfaBeta\";\nimport RLAgent from \"./RLAgent\";\nimport {ResultadoEjecucion} from \"../modelos/ResultadoEjecucion\";\n\nexport const jugarEstrategia = (tablero: Tablero,\n\t\t\t\t\t\t\t\tparametros: configuracionParametros,\n\t\t\t\t\t\t\t\tjugador: Ficha,\n\t\t\t\t\t\t\t\tmodo: Modo): [Tablero, ResultadoEjecucion] => {\n    const nuevoTablero = new Tablero();\n    nuevoTablero.posiciones = JSON.parse(JSON.stringify(tablero.posiciones)); // Copiar posiciones\n\n    // Seleccionar estrategia\n    let agente: MinMax | AlfaBeta | RLAgent;\n\tlet estrategia: Estrategia;\n\n\tif (modo === Modo.Humano || modo === Modo.Estrategia || jugador === Ficha.Amarillo){\n\t\testrategia = parametros.estrategiaA;\n\t\tswitch (parametros.estrategiaA) {\n\t\t\tcase Estrategia.Minimax:\n\t\t\t\tagente = new MinMax(parametros.nivelA);\n\t\t\t\tbreak\n\t\t\tcase Estrategia.Alfabeta:\n\t\t\t\tagente = new AlfaBeta(parametros.nivelA);\n\t\t\t\tbreak\n\t\t\tcase Estrategia.RLAgent:\n\t\t\t\tagente = RLAgent.Agente;\n\t\t\t\tagente.reset(false);\n\t\t\t\tbreak\n\t\t\tdefault:\n\t\t\t\tagente = new MinMax(parametros.nivelA);\n\t\t\t\tbreak\n\t\t}\n\t} else {\n\t\testrategia = parametros.estrategiaB;\n\t\tswitch (parametros.estrategiaB) {\n\t\t\tcase Estrategia.Minimax:\n\t\t\t\tagente = new MinMax(parametros.nivelB);\n\t\t\t\tbreak\n\t\t\tcase Estrategia.Alfabeta:\n\t\t\t\tagente = new AlfaBeta(parametros.nivelB);\n\t\t\t\tbreak\n\t\t\tcase Estrategia.RLAgent:\n\t\t\t\tagente = RLAgent.AgenteB;\n\t\t\t\tagente.reset(false);\n\t\t\t\tbreak\n\t\t\tdefault:\n\t\t\t\tagente = new MinMax(parametros.nivelB);\n\t\t\t\tbreak\n\t\t}\n\t}\n\n    // Configurar agente\n    agente.tablero = nuevoTablero;\n\n    // Realizar jugada elitista / validación\n\tlet t0 = performance.now();\n    agente.jugarElitista(jugador);\n\tlet t1 = performance.now();\n\n\tlet res = new ResultadoEjecucion(agente.n, estrategia, t1-t0, agente.expansiones);\n\n    return [agente.tablero, res];\n}","// Basado en https://github.com/Cono52/connect-four-react\nimport React, {useEffect, useState} from \"react\";\nimport {Ficha} from \"../modelos/ficha\";\nimport Tablero from \"../modelos/tablero\";\nimport {Modo} from \"../modelos/modo\";\nimport {Resultado} from \"../modelos/resultado\";\nimport configuracionParametros from \"../modelos/configuracionParametros\";\nimport {jugarEstrategia} from \"../algoritmos/jugadorEstrategia\";\nimport {ResultadoEjecucion} from \"../modelos/ResultadoEjecucion\";\n\ntype AgujeroProps = {\n    fichaValor: Ficha\n};\n\ntype ColumnaProps = {\n    handleClick: () => void,\n    agujeros: Ficha[]\n};\n\ntype TableroProps = {\n    parametros: configuracionParametros,\n    grabarResultado: (resultado: ResultadoEjecucion) => void\n}\n\nconst Agujero = ({fichaValor}: AgujeroProps) => {\n    return (\n        <div className=\"Agujero\">\n            <div className={Ficha[fichaValor]}>\n\n            </div>\n        </div>\n    );\n};\n\nconst Columna = ({handleClick, agujeros}: ColumnaProps) => {\n    return (\n        <div className=\"Columna\" onClick={() => handleClick()}>\n            {\n                [...Array(agujeros.length)].map((_, j) =>\n                    (<Agujero fichaValor={agujeros[j]} key={j}/>)\n                ).reverse()\n            }\n        </div>\n    );\n};\n\n\nexport const TableroGrafico = ({parametros, grabarResultado}: TableroProps) => {\n    // Constantes\n    const FICHA_ESTRATEGIA = Ficha.Amarillo;\n    const FICHA_HUMANO = Ficha.Rojo;\n\n    // Estados\n    const [tablero, setTablero] = useState(new Tablero());\n    const [turno, setTurno] = useState(Ficha.Rojo);\n    const [modo, setModo] = useState(Modo.SinSeleccionar);\n    const [ganador, setGanador] = useState('');\n\n    // Función para seleccionar modo\n    const seleccionarModo = (modo: Modo) => {\n        setModo(modo);\n        setTablero(new Tablero());\n        setTurno(Ficha.Rojo);\n    }\n\n    // Función para hacer un movimiento\n    const hacerMovimiento = (idxColumna: number) => {\n        if (tablero.verificarColumnaLibre(idxColumna) && tablero.calcularResultado() === Resultado.SinGanador) {\n            const copiaTablero = new Tablero();\n            copiaTablero.posiciones = JSON.parse(JSON.stringify(tablero.posiciones));\n            copiaTablero.tirarFicha(idxColumna, turno);\n            setTablero(copiaTablero);\n            setTurno(turno === Ficha.Rojo ? Ficha.Amarillo : Ficha.Rojo);\n        } else {\n            console.log(\"Movimiento invalido\");\n        }\n    }\n\n    // Crear las columnas\n    let columnas = [...Array(tablero.posiciones[0].length)].map((_, i) => (\n        <Columna handleClick={() => hacerMovimiento(i)}\n                 agujeros={tablero.posiciones.map(value => value[i])}\n                 key={i}/>\n    ));\n\n    // Crear estilo del ganador\n    let estiloGanador = ganador !== '' ? \"mensajeGanador aparecer\" : \"mensajeGanador\";\n\n    // Ejecutar cuando se cambia de turno\n    useEffect(() => {\n        let ganadorTentador = tablero.calcularResultado();\n        switch (ganadorTentador) {\n            case Resultado.Empate:\n                setGanador(\"ninguno\");\n                break;\n            case Resultado.GanadorRojo:\n                setGanador(\"Rojo\");\n                break;\n            case Resultado.GanadorAmarillo:\n                setGanador(\"Amarillo\");\n                break;\n            case Resultado.SinGanador:\n            // El juego continua, el siguiente jugador hace su movimiento si es una estrategia\n            // TODO: Jugar estrategia\n                if (modo === Modo.Estrategia && turno === FICHA_ESTRATEGIA) {\n                    // Jugar estrategia\n                    const [nuevoTablero, res] = jugarEstrategia(tablero, parametros, turno, modo);\n                    setTablero(nuevoTablero);\n                    setTurno(FICHA_HUMANO);\n                    grabarResultado(res);\n                }\n\t\t\t\t\n\t\t\t\tif (modo === Modo.CPU) {\n\t\t\t\t\tif (turno === FICHA_ESTRATEGIA){\n\t\t\t\t\t\t// Jugar estrategia\n\t\t\t\t\t\tconst [nuevoTablero, res] = jugarEstrategia(tablero, parametros, turno, modo);\n\t\t\t\t\t\tsetTablero(nuevoTablero);\n\t\t\t\t\t\tsetTurno(FICHA_HUMANO);\n                        grabarResultado(res);\n\t\t\t\t\t}else{\n\t\t\t\t\t\tconst [nuevoTablero, res] = jugarEstrategia(tablero, parametros, turno, modo);\n\t\t\t\t\t\tsetTablero(nuevoTablero);\n\t\t\t\t\t\tsetTurno(FICHA_ESTRATEGIA);\n                        grabarResultado(res);\n\t\t\t\t\t}\n                }\n\n        }\n        // eslint-disable-next-line\n    }, [turno, tablero]);\n\n    return (\n        <div className=\"TableroGrafico\">\n            {modo !== Modo.SinSeleccionar &&\n            <div className=\"Tablero\">\n                {columnas}\n            </div>\n            }\n            {(modo === Modo.SinSeleccionar) &&\n            <div>\n                <button className=\"btn btn-primary mx-3\" onClick={() => seleccionarModo(Modo.Humano)}>Jugar Humano</button>\n                <button className=\"btn btn-primary mx-3\" onClick={() => seleccionarModo(Modo.Estrategia)}>Jugar Estrategia</button>\n\t\t\t\t<button className=\"btn btn-primary mx-3\" onClick={() => seleccionarModo(Modo.CPU)}>Estrategia contra Estrategia</button>\n            </div>\n            }\n            <div className={estiloGanador}>Gana {ganador}!</div>\n        </div>\n    );\n};","import {Estrategia} from \"./estrategia\";\n\nexport default class configuracionParametros {\n    estrategiaA: Estrategia = Estrategia.Minimax;\n    nivelA: number = 3;\n    qRateA: number = 0.5;\n\testrategiaB: Estrategia = Estrategia.Minimax;\n    nivelB: number = 3;\n    qRateB: number = 0.5;\n}","import React from \"react\";\nimport {ResultadoEjecucion} from \"../modelos/ResultadoEjecucion\";\nimport {Table} from \"react-bootstrap\";\nimport {Estrategia} from \"../modelos/estrategia\";\n\ntype ResultadosProps = {\n    resultados: ResultadoEjecucion[]\n}\n\nexport const TablaResultados = ({ resultados }: ResultadosProps) => {\n    return (\n        <Table striped bordered hover variant=\"dark\">\n            <thead>\n            <tr>\n                <th>Nº Jugada</th>\n                <th>N</th>\n                <th>Algoritmo</th>\n                <th>Tiempo de Ejecución (ms)</th>\n                <th>Nodos Expandidos</th>\n            </tr>\n            </thead>\n            <tbody>\n            {\n                resultados.map( (resultado, idx) =>\n                    <tr key={idx}>\n                        <td>{idx + 1}</td>\n                        <td>{resultado.n}</td>\n                        <td>{Estrategia[resultado.algoritmo]}</td>\n                        <td>{resultado.tiempo}</td>\n                        <td>{resultado.nodos_expandidos}</td>\n                    </tr>)\n            }\n            </tbody>\n        </Table>\n    )\n}","import {ficha2Resultado, Resultado} from \"../modelos/resultado\";\nimport Tablero from \"../modelos/tablero\";\nimport {Ficha} from \"../modelos/ficha\";\nimport MinMax from \"../algoritmos/MinMax\";\nimport AlfaBeta from \"../algoritmos/AlfaBeta\";\n\nexport const MiniMaxVsAlfaBeta = (totalGamesCount = 100, n_minimax = 3, n_alfabeta = 3,\n                                  inicia = Ficha.Amarillo) => {\n    let winsMinimax = 0;\n    let winsAlfaBeta = 0;\n    let draws = 0;\n    let tiempo = 0;\n    let FICHA_MINIMAX = Ficha.Rojo;\n    let FICHAS_ALFABETA = Ficha.Amarillo;\n\n    for (let i = 0; i < totalGamesCount; i++) {\n        let tablero = new Tablero();\n        let resultado = tablero.calcularResultado();\n        let turno = inicia\n        let agente: MinMax | AlfaBeta;\n\n        let t0 = performance.now();\n        do {\n            if (turno === FICHA_MINIMAX) {\n                agente = new MinMax(n_minimax);\n            } else {\n                agente = new AlfaBeta(n_alfabeta);\n            }\n\n            agente.tablero = tablero;\n            agente.jugarElitista(turno);\n            tablero = agente.tablero;\n\n            turno = turno === Ficha.Rojo ? Ficha.Amarillo : Ficha.Rojo;\n\n            resultado = tablero.calcularResultado();\n        } while (resultado === Resultado.SinGanador); // Hasta que termine\n        let t1 = performance.now();\n\n        tiempo += t1-t0;\n\n        switch (resultado) {\n            case ficha2Resultado(FICHA_MINIMAX):\n                winsMinimax++;\n                break\n            case ficha2Resultado(FICHAS_ALFABETA):\n                winsAlfaBeta++;\n                break\n            default:\n                draws++;\n        }\n    }\n\n    console.log(`>>>>>>>>>>>>>>> Minimax(${n_minimax}) vs Alfabeta(${n_alfabeta})`);\n    console.log(\"Minimax W/T: \" + winsMinimax / totalGamesCount);\n    console.log(\"Alfabeta W/T: \" + winsAlfaBeta / totalGamesCount);\n    console.log(\"D/T: \" + draws / totalGamesCount);\n    console.log(\"Tiempo Promedio: \" + tiempo / totalGamesCount);\n}\n","import RLAgent from \"../algoritmos/RLAgent\";\nimport {ficha2Resultado} from \"../modelos/resultado\";\nimport {Estrategia} from \"../modelos/estrategia\";\n\nexport const MiniMaxVsRL = (trainingCount = 10000,\n                            totalGamesCount = 100,\n                            totalExperiments = 10,\n                            qRates = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],\n                            nivel = 2,\n                            estrategia: Estrategia.Minimax | Estrategia.Alfabeta = Estrategia.Minimax) => {\n\n    for (let q = 0; q < qRates.length; q++) {\n\n        let winsRatioAcum = 0;\n        let lossesRatioAcum = 0;\n        let drawsRatioAcum = 0;\n        let tiempoPromAcum = 0;\n        for (let k = 0; k < totalExperiments; k++) {\n\n            //TRAIN\n            let ag = new RLAgent(trainingCount);\n            ag.qRate = qRates[q];\n            for (let i = 0; i < ag.n; i++) {\n                ag.reset(true);\n                ag.updateAlpha(i);\n                ag.selfPlay();\n            }\n\n            if (totalGamesCount === 0) break;\n            console.log(\">>>>>>>>>>>>>>> AFTER TRAINING \");\n\n            //VALIDATION\n            let wins = 0;\n            let losses = 0;\n            let draws = 0;\n            let tiempo = 0;\n            let contrario = 2 - ag.jugadorAgente + 1;\n\n            for (let i = 0; i < totalGamesCount; i++) {\n                let t0 = performance.now();\n                ag.reset(false);\n                ag.jugarVsMinimax(nivel, estrategia);\n                let t1 = performance.now();\n\n                tiempo += t1-t0;\n\n                if (ag.gameResult === ficha2Resultado(ag.jugadorAgente)) {\n                    wins++;\n                } else if (ag.gameResult === contrario) {\n                    losses++;\n                } else {\n                    draws++;\n                }\n            }\n\n            winsRatioAcum += wins / totalGamesCount;\n            lossesRatioAcum += losses / totalGamesCount;\n            drawsRatioAcum += draws / totalGamesCount;\n            tiempoPromAcum += tiempo / totalGamesCount;\n        }\n        console.log(\">>>>>>>>>>>>>>> RATIO AVG, Q RATE: \" + qRates[q]);\n        console.log(\"Ratio Avg RL W/T: \" + winsRatioAcum / totalExperiments);\n        console.log(\"Ratio Avg MIN/AB W/T: \" + lossesRatioAcum / totalExperiments);\n        console.log(\"Ratio Avg D/T: \" + drawsRatioAcum / totalExperiments);\n        console.log(\"Ratio Avg Tiempo: \" + tiempoPromAcum / totalExperiments);\n    }\n}","import React from \"react\";\nimport {RLvsRL} from \"../experimentos/RLvsRL\";\nimport {MiniMaxVsAlfaBeta} from \"../experimentos/MiniMaxVsAlfaBeta\";\nimport {MiniMaxVsRL} from \"../experimentos/MiniMaxVsRL\";\nimport {Estrategia} from \"../modelos/estrategia\";\n\nexport const Experimento = () => {\n\n    return (\n        <>\n            <button onClick={() => RLvsRL()}>RLvsRL</button>\n            <button onClick={() => MiniMaxVsAlfaBeta(100, 3, 3)}>\n                Minimax(3)vsAlfaBeta(3)\n            </button>\n            <button onClick={() => MiniMaxVsAlfaBeta(100, 4, 2)}>\n                Minimax(4)vsAlfaBeta(2)\n            </button>\n            <button onClick={() => MiniMaxVsAlfaBeta(100, 2, 4)}>\n                Minimax(2)vsAlfaBeta(4)\n            </button>\n            <button onClick={() => MiniMaxVsRL()}>\n                Minimax(2)vsRL\n            </button>\n            <button onClick={() => MiniMaxVsRL(10000,\n                100, 10, [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9], 2,\n                Estrategia.Alfabeta)}>\n                Alfabeta(2)vsRL\n            </button>\n        </>\n    )\n}","import RLAgent from \"../algoritmos/RLAgent\";\nimport {ficha2Resultado} from \"../modelos/resultado\";\n\nexport const RLvsRL = (trainingCount = 10000, humanTrainingCount = 0,\n                       totalGamesCount = 100, totalExperiments = 10,\n                       qRates = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]) => {\n\n    for (let q = 0; q < qRates.length; q++) {\n\n        let winsRatioAcum = 0;\n        let lossesRatioAcum = 0;\n        let drawsRatioAcum = 0;\n        let tiempoPromAcum = 0;\n        for (let k = 0; k < totalExperiments; k++) {\n\n            //TRAIN\n            let ag = new RLAgent(trainingCount);\n            ag.qRate = qRates[q];\n            for (let i = 0; i < ag.n; i++) {\n                ag.reset(true);\n                ag.updateAlpha(i);\n                ag.selfPlay();\n            }\n\n            //human train\n            ag.n = humanTrainingCount;\n            ag.alpha = 0.7; //suponemos que el humano juega bien (explotación)\n            for (let i = 0; i < ag.n; i++) {\n                ag.reset(true);\n                //ag.updateAlpha(i);\n                ag.jugarVsHumano();\n            }\n\n            if (totalGamesCount === 0) break;\n            console.log(\">>>>>>>>>>>>>>> AFTER TRAINING \");\n\n            //VALIDATION\n            let wins = 0;\n            let losses = 0;\n            let draws = 0;\n            let contrario = 2 - ag.jugadorAgente + 1;\n            let tiempo = 0;\n            for (let i = 0; i < totalGamesCount; i++) {\n\n                let t0 = performance.now();\n                ag.reset(false);\n                ag.jugarVsRandom();\n                let t1 = performance.now();\n\n                tiempo += t1-t0;\n\n                if (ag.gameResult === ficha2Resultado(ag.jugadorAgente)) {\n                    wins++;\n                } else if (ag.gameResult === contrario) {\n                    losses++;\n                } else {\n                    draws++;\n                }\n            }\n\n            winsRatioAcum += wins / totalGamesCount;\n            lossesRatioAcum += losses / totalGamesCount;\n            drawsRatioAcum += draws / totalGamesCount;\n            tiempoPromAcum += tiempo / totalGamesCount;\n        }\n        console.log(\">>>>>>>>>>>>>>> RATIO AVG, Q RATE: \" + qRates[q]);\n        console.log(\"Ratio Avg W/T: \" + winsRatioAcum / totalExperiments);\n        console.log(\"Ratio Avg L/T: \" + lossesRatioAcum / totalExperiments);\n        console.log(\"Ratio Avg D/T: \" + drawsRatioAcum / totalExperiments);\n        console.log(\"Ratio Avg Tiempo: \" + tiempoPromAcum / totalExperiments);\n    }\n}","import './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {Container, Row} from \"react-bootstrap\";\nimport {Parametros} from \"./componentes/Parametros\";\nimport {TableroGrafico} from \"./componentes/TableroGrafico\";\nimport {useState} from \"react\";\nimport configuracionParametros from \"./modelos/configuracionParametros\";\nimport {TablaResultados} from \"./componentes/TablaResultados\";\nimport {Experimento} from \"./componentes/Experimento\";\n\nconst algoritmos = [\"Minimax\", \"RLAgent\", \"Banana\"]\n\nfunction App() {\n  // Variables\n  const [parametros, setParametros] = useState(new configuracionParametros());\n  const [resultados, setResultados] = useState([]);\n\n\n  // Handlers\n  const cambiarParametros = parametros => {\n    // Do something\n    setParametros(parametros);\n  }\n\n  const limpiarTablero = () => {\n    // Do something\n  }\n\n  const grabarResultado = (resultado) => {\n    setResultados( prevState => {\n      const newState = JSON.parse(JSON.stringify(prevState));\n      newState.push(resultado);\n      return newState;\n    });\n  }\n\n\n  // Render\n  return (\n    <div className=\"App p-3\">\n      <Container>\n        <h3 className=\"text-start h2 mb-3\">Connect-4</h3>\n        {/* Parametros*/}\n        <hr/>\n        <h4>Parámetros del problema</h4>\n        <Row className=\"mt-3\">\n          <Parametros\n              onElegirEstrategia={cambiarParametros}\n              onLimpiarTablero={limpiarTablero}\n              algoritmos={algoritmos}/>\n        </Row>\n        {/* Tablero */}\n        <hr/>\n        <h4>Tablero</h4>\n        <Row className=\"mt-3\">\n          <TableroGrafico parametros={parametros} grabarResultado={grabarResultado}/>\n        </Row>\n        {/* Resultados */}\n        <hr/>\n        <h4>Resultados</h4>\n        <Row className=\"mt-3\">\n          <TablaResultados resultados={resultados}/>\n        </Row>\n        {/* Experimentos */}\n        <hr/>\n        <h4>Experimentos</h4>\n        <Row className=\"mt-3\">\n          <Experimento/>\n        </Row>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}